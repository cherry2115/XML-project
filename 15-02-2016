package New;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.Calendar;
import javax.xml.transform.stream.StreamResult;
import org.xml.sax.SAXException;
import java.util.regex.Pattern;

public class Code
{
	//declaring variables globally what all we used in this code  
			BufferedReader in;
		    static StreamResult out;
		    BufferedWriter log=null;
        	static File logFile=null;
        	static FileOutputStream fos=null;
        	static String langcode="";
        	//predefined language code from Elsevier Dtd family to verify lang code for validating given corresponding input document
        	static String LangCode="|aa|ab|af|am|ar|as|ay|az|ba|be|bg|bh|bi|bn|bo|br|ca|co|cs|cy|da|de|dz|el|en|eo|es|et|eu|"
        			+ "fa|fi|fj|fo|fr|fy|ga|gd|gl|gn|gu|ha|he|hi|hr|hu|hy|ia|id|ie|ik|is|it|ja|jw|ka|kk|kl|km|kn|ko|"
        			+ "ks|ku|ky|la|ln|lo|lt|lv|mg|mi|mk|ml|mn|mo|mr|ms|mt|my|na|ne|nl|no|oc|om|or|pa|pl|ps|pt|qu|rm|"
        			+ "rn|ro|ru|rw|sa|sd|sg|si|sk|sl|sm|sn|so|sq|sr|ss|st|su|sv|sw|ta|te|tg|th|ti|tk|tl|tn|to|tr|ts|"
        			+ "tt|tw|uk|ur|uz|vi|vo|wo|xh|yi|yo|zh|zu|";
        	//predefined copyrightInfo codes from Elsevier Dtd family to verify corresponding copyright status for validating given corresponding input document 
        	static String copyrightInfo="@|000|free-of-copyright| |@|001|unknown| |@|002|full-transfer|Elsevier Company|"
        			+ "@|003|us-gov| |@|004|crown| |@|005|limited-transfer|Elsevier Company|@|006|other|Author|"
        			+ "@|007|no-transfer| |@|008|other| |@";
        	
        	//declaring variables globally what all we used in this code  
        	static String str = "";
        	static String xmlout="";
        	static String docsubtype="fla";
        	static String inputpath="";
        	static String xmldirpath="";
        	static String Globalpii="";
        	static String Global_floats_str="";
        	static String figentities="";
        	
        	// Here's our entry point ... 
        	//main function starts from here 
     	 public static void main(String args[]) throws IOException
		    {
     		 
     		 //passing input file in command line arguments
     		 	inputpath=args[0];
     		 //checking and validating  java version 
		    	Initlisation initial = new Initlisation();
				Initlisation.checkjavaVersion(1.7f);

		        new Code().doit();
		    }

		    public  void doit() 
		    	{
		    	   try 
		    		{
		 //reading a file from input path 
					in = new BufferedReader(new FileReader(inputpath));
				 
		//Reading input path directooy and concating output also in same directory path
					 String dirpath=inputpath.toString().substring(0,inputpath.toString().lastIndexOf("\\"));
					 xmldirpath=dirpath.concat("\\tx1.xml");
					   
		//Reading input path directory and concating logtext file also in same directory path
					    String logdirpath=dirpath.concat("\\Log.txt");
					    File logFile=new File(logdirpath);
					  
		     		 	fos=new FileOutputStream(logFile);
	     //if log file not exist means create a new log file  
						if(!logFile.exists())
			        	{
			        		logFile.createNewFile();
			        	}
					  
					
	   //Declaring string  variables globally what we use in processing of every method          
		            //String str = "";
		            String s="";
			    	String  iteminfo_str="";
			    	String  header_str="";
			    	String  body_str="";
			    	String  tail_str="";
			    	String floats_str="";
			    	
	  //Reading data from line by line  	
			    	while ((s = in.readLine()) != null)
		            { 
		            	str += s+"\n";
					}
//		            System.out.println("str..."+str);
//		            System.exit(0);
			    	
	  //Replace all (<) as (<td:)	and (</) as (</td:>)	 
			    	str=str.replaceAll("<([^/!?])", "<td:$1");
		       	
			    	str=str.replaceAll("</", "</td:");
//			    	System.out.println("str..."+str);
//			    	System.exit(0);
		           
     //processing all common tags used in input file to output file
			    	str=processcommontags(str);
			    	
//		      	 	System.out.println("My Output is==== : " +str); 
		       	  	 
				    	
			    	iteminfo_str= ItemInfo(str);	//processing iteminfo method to fetch item-info data 
			    	xmlout+=iteminfo_str;			//writting iteminfo data to xml file as xmlout
			    	
	
			    	header_str=HeaderInfo(str);		//processing headerinfo method to fetch header-info data
			    	xmlout+=header_str;				//writting headerinfo data to xml file as xmlout
		       	
	
			    	body_str = BodyInfo(str);		//processing bodyinfo method to fetch body-info data
			    	xmlout+=body_str;				//writting bodyinfo data to xml file as xmlout
			  	
	
			    	tail_str = TailInfo(str);		//processing tailinfo method to fetch tail-info data
			    	xmlout+=tail_str;				//writting tailinfo data to xml file as xmlout
			    	
	
			    	floats_str = FloatsInfo(str);	//processing item-info method to fetch item-info data
			    	xmlout=xmlout.replaceAll("(?s)</item-info>", "</item-info>"+floats_str);	//writting floatinfo data to xml file as xmlout
//			    	xmlout+=floats_str;
		     	
			    	xmlout=processids(xmlout);			//processing id generation for every sections in xml 
			    	xmlout=processcommontags(xmlout);	//processing common tags in xml
			    	xmlout=processcrossref(xmlout);		//processing crossref in xml
			    	
//--------------------------------------------------------------------------------------------------------			    	
			    	xmlout=xmlout.replaceAll("(?s)\\s+id=\"crfs?\\d+\"\\s+"," ");
			    	xmlout=xmlout.replaceAll("(?s)<ce:cross-ref\\s+refid=\"([a-z]+[0-9]+)\\s+([^>]*?)>((?:(?!(?:</?ce:cross-ref)).)*?)</ce:cross-ref>",
			    			"<ce:cross-refs refid=\"$1 $2>$3</ce:cross-refs>");
			    	int idcount=0;
			    	System.out.println("\t\t...Cross reference");
			    	while(xmlout.matches("(?s)(.*?)<ce:cross-ref\\s+refid=(.*?)")){
				    	Pattern p = Pattern.compile("<ce:cross-ref\\s+refid=",Pattern.DOTALL);		//pattern for crossref id generation
				    	java.util.regex.Matcher m=p.matcher(xmlout);
				    	if(m.find()){
				    		String grp=m.group();
//				    		String grp1=m.group(1);
				    		String grpprp=xmlout.substring(0, m.start());
				    		String grppop=xmlout.substring(m.end(),xmlout.length());
				    		idcount+=5;
				    		grp="<ce:cross-ref id=\"crf"+String.format("%04d", idcount)+"\" refid=";	//code for automaticly increase id number as like crf0005 to crf0010
				    		xmlout=grpprp+grp+grppop;
				    	}
			    	}
			    	
			    	idcount=0;
			    	System.out.println("\t\t...Cross references");
			    	while(xmlout.matches("(?s)(.*?)<ce:cross-refs\\s+refid=(.*?)")){
				    	Pattern p = Pattern.compile("<ce:cross-refs\\s+refid=",Pattern.DOTALL);		//pattern for crossrefs id generation
				    	java.util.regex.Matcher m=p.matcher(xmlout);
				    	if(m.find()){
				    		String grp=m.group();
//				    		String grp1=m.group(1);
				    		String grpprp=xmlout.substring(0, m.start());
				    		String grppop=xmlout.substring(m.end(),xmlout.length());
				    		idcount+=5;
				    		grp="<ce:cross-refs id=\"crfs"+String.format("%04d", idcount)+"\" refid=";//code for automaticly increase id number as like crfs0005 to crfs0010
				    		xmlout=grpprp+grp+grppop;
				    	}
			    	}
//--------------------------------------------------------------------------------------------------------

		  //replacing tags in xml	    	
			    	xmlout=xmlout.replaceAll("(?s)\\s+>",">"); //replace (\\s+>)as(>)
			    	xmlout=xmlout.replaceAll("<entry((?:(?!(?:\\s+align=)).)*?)>", "<entry align=\"left\"$1>");	//replace ( >)as(>)
			    	xmlout=xmlout.replaceAll("<ce:table((\\s+(?:(?!(?:\\bframe=)).)*?)>|\\s*>)", "<ce:table frame=\"topbot\"$1");//replace (\\bframe=)as(topbot)
			    	xmlout=xmlout.replaceAll("  ", " ");//replace (  )as( )

			    	xmlout=xmlout.replaceAll("(?s)<ce:section\\s+([^>]*?)>\\s*(<ce:label>((?:(?!(?:</?ce:label>)).)*?)</ce:label>)?\\s*<ce:section-title([^>]*?)\\s+role=\"([^\"]*?)\"([^>]*?)>",
			    			"<ce:section $1 role=\"$5\">$2<ce:section-title$4$6>");	//replace corresponding sectiontitle as role value

			    	xmlout=xmlout.replaceAll("(?s)<ce:para\\s+([^>]*?)>\\s*<td:span\\s+class=\"supple_extended\">((?:(?!(?:</?td:span>)).)*?)</td:span>(.*?)</ce:para>\\s*", "<ce:para $1 view=\"extended\">$2$3</ce:para>");//replacing (supple_extended) as (extended)  with corresponding tags 
			    	
			    	xmlout=xmlout.replaceAll("(?s)<ce:para\\s+([^>]*?)>\\s*<td:span\\s+class=\"supple_compactStandard\">((?:(?!(?:</?td:span>)).)*?)</td:span>(.*?)</ce:para>\\s*", "<ce:para $1 view=\"compact-standard\">$2$3</ce:para>");//replacing (supple_compactStandard) as (compact-standard)  with corresponding tags
			   
			    	xmlout=xmlout.replaceAll("(?s)<sb:host\\s+type=\"([^\"]*?)\"","<sb:host");	//replacing (<sb:host type="article") as (<sb:host)  with corresponding tags
			    	xmlout=xmlout.replaceAll("(?s)<(entry|ce:simple-para)(>|\\s+([^>]*?)>)(\\s+|&#160;)","<$1$2");	//replace nobreakspace as empty 
			    	xmlout=xmlout.replaceAll("(?s)(\\s+|&#160;)</(entry|ce:simple-para)>((\\s+|&#160;))?","</$2>");	//replace nobreakspace as empty 
			    	xmlout=xmlout.replaceAll("(?si)\\s+role=\"Materials?\\s+and\\s+methods?\""," role=\"materials-methods\"");	//replace (Materials and methods) as (materials-methods)
			    	xmlout=xmlout.replaceAll("(?si)\\s+role=\"Introduction\""," role=\"introduction\"");	//replace (role="Introduction") as (role="introduction")
			    	xmlout=xmlout.replaceAll("(?si)\\s+role=\"Conclusions?\""," role=\"conclusion\"");		//replace (role="Conclusions") as (role="conclusion")
			    	xmlout=xmlout.replaceAll("(?si)\\s+role=\"(Results?\\s+and\\s+discussions?|Results?|Discussions?)\""," role=\"discussion\"");	//replace (role="Results and discussion") as (role="discussion")
			    	xmlout=xmlout.replaceAll("(?si)\\s*</ce:legend>\\s*<ce:legend>\\s*","");	//replace (</ce:legend>\\s*<ce:legend>) as ("")
			    	
			    	xmlout=xmlout.replaceAll("(?si)<ce:float-anchor\\s+refid=\"([^\"]*?)\">((?:(?!(?:</ce:float-anchor>)).)*?)</ce:float-anchor>","<ce:float-anchor refid=\"$1\"/>");	//replace (</ce:float-anchor>) as ("/>")
			    	xmlout=xmlout.replaceAll("(?si)<td:img\\s+src=\"([^\"]*?)glyph(\\d+).(JPG|eps|gif|tiff?)\"([^>]*?)/>","<ce:glyph name=\"rad\"/>");	//processing glyphs
			    	xmlout=xmlout.replaceAll("(?si)<td:span\\s+class=\"xps_grantnumber\">((?:(?!(?:</?td:span>)).)*?)</td:span>","");	
			    	
			    	
			    	xmlout=xmlout.replaceAll("(?si)<ce:abstract\\s+id=\"([^\"]*?)\">\\s*<ce:section-title\\s+id=\"([^\"]*?)\">"
			    			+ "\\s*(Graphical\\s+abstract)\\s*</ce:section-title>","<ce:abstract id=\"$1\" class=\"graphical\">"
			    					+ "<ce:section-title id=\"$2\">$3</ce:section-title>");	

			    	xmlout=xmlout.replaceAll("(?si)<ce:abstract\\s+id=\"([^\"]*?)\">\\s*<ce:section-title\\s+id=\"([^\"]*?)\">"
			    			+ "\\s*(Highlights)\\s*</ce:section-title>","<ce:abstract id=\"$1\" class=\"author-highlights\">"
			    					+ "<ce:section-title id=\"$2\">$3</ce:section-title>");	
			    	
			    	
			   //generating and counting fig entities
			    	if(xmlout.matches("(?si)(.*?)<ce:link\\s+locator=\"([^\"]*?)\"([^>]*?)/>(.*?)")){
			    		Pattern p = Pattern.compile("(?is)<ce:link\\s+locator=\"([^\"]*?)\"([^>]*?)/>",Pattern.DOTALL);		//pattern for linklocator to generete figentities
				    	java.util.regex.Matcher m=p.matcher(xmlout);
				    	while(m.find()){
				    		figentities+="<!ENTITY "+m.group(1)+" SYSTEM \""+m.group(1)+"\" NDATA IMAGE>";	//Hardcode data for figentities along with imagenumber like image xlink
				    	}
			    	}

		       	xmlout+="</article>";//ending tag of xmlout
		     //Xml utfencoding standard data writing       	
		       	xmlout="<?xml version=\"1.0\" encoding=\"utf-8\"?><!DOCTYPE article PUBLIC \"-//ES//DTD journal article DTD version 5.4.0//EN//XML\" \"art540.dtd\" ["+figentities+"]>"
		    			+ "<article version=\"5.4\" xml:lang=\""+langcode+"\" docsubtype=\""+docsubtype+"\">"+xmlout;
		       	processxmlout(xmlout);	//method to process xmlfile 
		     
		       	 in.close();//closing input file 
		        }
		        catch (Exception e) 
		        {
		            e.printStackTrace();
		        }
		    }
	
		   //processing all cross references for all tags like figures,float anchors,tablereferences etc...
		    private String processcrossref(String xmlout1) {
			
		    	System.out.println("Processing crossreferences...");
		    	System.out.println("\ttable foot-note...");
		    	while(xmlout1.matches("(?s)(.*?)(<tgroup([^>]*?)>((?:(?!(?:</?tgroup)).)*?)(<ce:cross-ref\\s+id=\"([^\"]*?)\"\\s+refid=\"tblfn\">\\s*"
							+ "<ce:sup>\\s*((?:(?!(?:</?ce:sup)).)*?)\\s*</ce:sup>\\s*</ce:cross-ref>)((?:(?!(?:</?tgroup)).)*?)</tgroup>)\\s*((?:(?!(?:</ce:table>)).)*?)"
								+ "<ce:table-footnote\\s+id=\"([^\"]*?)\">\\s*<ce:label>\\s*\\7\\s*</ce:label>"
								+ "((?:(?!(?:</ce:table>)).)*?)</ce:table>(.*?)")){
		    		//processing table foot-note data 
		    		xmlout1=xmlout1.replaceAll("(?s)(<tgroup([^>]*?)>((?:(?!(?:</?tgroup)).)*?)(<ce:cross-ref\\s+id=\"([^\"]*?)\"\\s+refid=\"tblfn\">\\s*"
							+ "<ce:sup>\\s*((?:(?!(?:</?ce:sup)).)*?)\\s*</ce:sup>\\s*</ce:cross-ref>)((?:(?!(?:</?tgroup)).)*?)</tgroup>)\\s*((?:(?!(?:</ce:table>)).)*?)"
								+ "<ce:table-footnote\\s+id=\"([^\"]*?)\">\\s*<ce:label>\\s*\\6\\s*</ce:label>"
								+ "((?:(?!(?:</ce:table>)).)*?)</ce:table>", 
								"<tgroup$2>$3<ce:cross-ref id=\"$5\" refid=\"$9\"><ce:sup>$6</ce:sup></ce:cross-ref>$7</tgroup>$8<ce:table-footnote id=\"$9\">"
								+ "<ce:label>$6</ce:label>$10</ce:table>");
			    	
		    	}
		    	
		    	
		    	System.out.println("\tfigure references...");
		    	if(xmlout1.matches("(?is)(.*?)<ce:figure\\s+id=\"fig\\d+\">\\s*<ce:label>((?:(?!(?:</ce:label>)).)*?)</ce:label>(.*?)")){
		    		Pattern p = Pattern.compile("(?is)<ce:figure\\s+id=\"fig(\\d+)\">\\s*<ce:label>\\s*(fig\\.|figure|scheme)\\s*"
		    				+ "((?:(?!(?:</ce:label>)).)*?)\\s*</ce:label>",Pattern.DOTALL);		//pattern for figure references
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	//Declaring local variables 
			    	String reffiggroup="";
			    	String reffigid="";
			    	String reffigname="";
			    	String reffignumber="";
			    	
			    	
			    	while(m.find()){
			    		
			    		reffiggroup=m.group();
			    		reffigid=m.group(1);
			    		reffigname=m.group(2).trim();
				    	reffignumber=m.group(3).trim();
			    		
//				    	System.out.println("reffigid:"+reffigid);
				    	//replce for multiple fig along with their crossrefids
				    	if(reffigname.matches("(?si)(.*?)(figs?\\.?|figures?)(.*?)")){
				    		xmlout1=xmlout1.replaceAll("(?is)<ce:cross-ref([s]?)\\s+id=\"crf\\1(\\d+)\"\\s+refid=\"fig\">\\s*(figs?\\.?|figures?)(\\s*)"+reffignumber
					    			+"\\s*</ce:cross-ref\\1>", "<ce:cross-ref$1 id=\"crf$1$2\" refid=\"fig"+reffigid+"\">"+"$3 $4"+reffignumber+"</ce:cross-ref$1>");
					    }else if(reffigname.matches("(?si)(.*?)(schemes?)(.*?)")){
					    	xmlout1=xmlout1.replaceAll("(?is)<ce:cross-ref([s]?)\\s+id=\"crf\\1(\\d+)\"\\s+refid=\"fig\">\\s*(schemes?)(\\s*)"+reffignumber
					    			+"\\s*</ce:cross-ref\\1>", "<ce:cross-ref$1 id=\"crf$1$2\" refid=\"fig"+reffigid+"\">"+"$3 $4"+reffignumber+"</ce:cross-ref$1>");
					    }
				    	reffiggroup="";
				    	reffigid="";
				    	reffigname="";
				    	reffignumber="";
			    	}
		    	}
		    	
		    	System.out.println("\tfigure float-anchors...");
		    	if(xmlout1.matches("(?is)(.*?)<ce:figure\\s+id=\"fig\\d+\">\\s*<ce:label>((?:(?!(?:</ce:label>)).)*?)</ce:label>(.*?)")){
		    		Pattern p = Pattern.compile("(?is)<ce:figure\\s+id=\"fig(\\d+)\">\\s*<ce:label>\\s*(fig\\.|figure|scheme)\\s*((?:(?!(?:</ce:label>)).)*?)\\s*</ce:label>",Pattern.DOTALL);//figure float anchor pattern		
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	//Declaring local variables 
			    	String reffiggroup="";
			    	String reffigid="";
			    	String reffigname="";
			    	String reffignumber="";
			    	
			    	while(m.find()){
			    	
			    		reffiggroup=m.group();
			    		reffigid=m.group(1);
			    		reffigname=m.group(2).trim();
				    	reffignumber=m.group(3).trim();
			    		
//				    	System.out.println("reffigid:"+reffigid);
				    	
//				    	xmlout1=xmlout1.replaceAll("(?is)<ce:float-anchor\\s+refid=\"fig\">\\s*(figs?\\.?|figures?)(\\s*)"+reffignumber
//				    			+"\\s*</ce:float-anchor>", "<ce:float-anchor refid=\"fig"+reffigid+"\">"+"$1 $2"+reffignumber+"</ce:float-anchor>");
				    	
//				    	xmlout1=xmlout1.replaceAll("(?is)<ce:float-anchor\\s+refid=\"fig\">\\s*(figs?\\.?|figures?)(\\s*)"+reffignumber
//				    			+"\\s*</ce:float-anchor>", "<ce:float-anchor refid=\"fig"+reffigid+"\">"+"$1 $2"+reffignumber+"</ce:float-anchor>");
				    	//replce floatanchor of figures along with their crossrefids
				    	
				    	
				    	if(reffigname.matches("(?si)(.*?)(figs?\\.?|figures?)(.*?)")){
				    		xmlout1=xmlout1.replaceAll("(?is)<ce:float-anchor\\s+refid=\"fig\">\\s*(figs?\\.?|figures?)(\\s*)"+reffignumber
					    			+"\\s*([,]?)\\s*(.*?)</ce:float-anchor>", "<ce:float-anchor refid=\"fig"+reffigid+"\">"+"$1 $2"+reffignumber+
					    			"</ce:float-anchor><ce:float-anchor refid=\"fig\">"+"$4"+"</ce:float-anchor>");
					    }else if(reffigname.matches("(?si)(.*?)(schemes?)(.*?)")){
					    	xmlout1=xmlout1.replaceAll("(?is)<ce:float-anchor\\s+refid=\"fig\">\\s*(schemes?)(\\s*)"+reffignumber
					    			+"\\s*([,]?)\\s*(.*?)</ce:float-anchor>", "<ce:float-anchor refid=\"fig"+reffigid+"\">"+"$1 $2"+reffignumber+
					    			"</ce:float-anchor><ce:float-anchor refid=\"fig\">"+"$4"+"</ce:float-anchor>");
						}
				    	reffiggroup="";
				    	reffigid="";
				    	reffigname="";
				    	reffignumber="";
			    	}
			    	xmlout1=xmlout1.replaceAll("(?is)<ce:float-anchor\\s+refid=\"fig\">\\s*</ce:float-anchor>","");
		    	}
		   	System.out.println("\ttable references...");
		    	if(xmlout1.matches("(?is)(.*?)<ce:table\\s+([^>]*?)id=\"tbl\\d+\"([^>]*?)>\\s*<ce:label>((?:(?!(?:</ce:label>)).)*?)</ce:label>(.*?)")){
		    		Pattern p = Pattern.compile("(?is)<ce:table\\s+([^>]*?)id=\"tbl(\\d+)\"([^>]*?)>\\s*<ce:label>\\s*(table)\\s*((?:(?!(?:</ce:label>)).)*?)\\s*</ce:label>",Pattern.DOTALL);//pattern for table references		
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
//			    	Declaring local variables
			    	String reftblgroup="";
			    	String reftblid="";
			    	String reftblidsnumbers="@";
			    	String reftblbeforeid="";
			    	String reftblafterid="";
			    	String reftblname="";
			    	String reftblnumber="";
//			    	String alltblnumbers="";
			  //processing single and multiple table refereces along with their refids 
			    	while(m.find()){
			    		reftblgroup=m.group();
			    		reftblbeforeid=m.group(1);
				    	reftblafterid=m.group(3);
			    		reftblid=m.group(2);
			    		reftblidsnumbers+="|"+reftblid+"|";//adding | for seperating and processing data 
			    		reftblname=m.group(4).trim();
				    	reftblnumber=m.group(5).trim();
				    	reftblidsnumbers+=reftblnumber+"|@";
				
//				    	xmlout1=xmlout1.replaceAll("(?is)<ce:cross-ref([s]?)\\s+id=\"crf\\1(\\d+)\"\\s+refid=\"tbl\">\\s*(tables?)(\\s*)"+reftblnumber
//				    			+"\\s*</ce:cross-ref\\1>", "<ce:cross-ref$1 id=\"crf$1$2\" refid=\"tbl"+reftblid+"\">"+"$3 $4"+reftblnumber+"</ce:cross-ref>");
				    	//replce floatanchor of figures along with their crossrefids
				    	xmlout1=xmlout1.replaceAll("(?is)<ce:cross-ref\\s+id=\"crf(\\d+)\"\\s+refid=\"tbl\">\\s*(tables?)(\\s*)"+reftblnumber
				    			+"\\s*</ce:cross-ref>", "<ce:cross-ref id=\"crf$1\" refid=\"tbl"+reftblid+"\">"+"$2 $3"+reftblnumber+"</ce:cross-ref>");
				    	
				    	reftblgroup="";
				    	reftblbeforeid="";
				    	reftblafterid="";
				    	reftblid="";
				    	reftblname="";
				    	reftblnumber="";
//				    	alltblids="";
//				    	alltblnumbers="";
			    	}
			    	
			    	p = Pattern.compile("(?is)<ce:cross-refs\\s+id=\"crfs(\\d+)\"\\s+refid=\"tbl\">\\s*((tables?)\\s*((?:(?!(?:</ce:cross-refs>)).)*?))\\s*</ce:cross-refs>",Pattern.DOTALL);//pattern for multiple tables refids 		
			    	m=p.matcher(xmlout1);
			    	
			    
				    	String refstblname="";
				    	String refstblnumber="";
				    	String refstblcontent="";
				    	String refscrfsid="";
				    	String refnewids="";
				    	while(m.find()){
				    		
				    		refscrfsid=m.group(1).trim();
				    		refstblcontent=m.group(2).trim();
				    		refstblname=m.group(3).trim();
				    		refstblnumber=m.group(4).trim();
				    		
				    		refstblnumber=refstblnumber.replaceAll("\\band\\b", ",");//replacing breaking as , 
				    		refstblnumber=refstblnumber.replaceAll("\\s+", "");
				    		refstblnumber=refstblnumber.replaceAll("\\band\\b", ",");
				    		
			    	//if multiple tables along with their refs  is there means we need to represent as below format
			    		while(refstblnumber.matches("(?is)^([^,-]+)(,|-|$)(.*?)$")){
				    			Pattern pp = Pattern.compile("(?is)^([^,-]+)(,|-|$)",Pattern.DOTALL);		//pattern for getting refnumgroup data 
						    	java.util.regex.Matcher mm=pp.matcher(refstblnumber);
					    		String refnum="";
						    	if(mm.find()){
						    		refnum=mm.group(1);//refnum data group
						    		System.out.println("groupcount:"+mm.groupCount()+" "+mm.group());
						    		System.out.println("refnum:"+refnum);
						    		System.out.println("refstblnumber:"+refstblnumber);
						    		System.out.println("refstblcontent:"+refstblcontent);
						    		
						    		refstblnumber=refstblnumber.substring(mm.end(), refstblnumber.length());
						    		System.out.println("refstblnumber1:"+refstblnumber);
					    		pp = Pattern.compile("(?is)@\\|([^\\|]*?)\\|"+refnum+"\\|@",Pattern.DOTALL);	//pattern for getting refnewids data	
						    	mm=pp.matcher(reftblidsnumbers);
							    	System.out.println("reftblidsnumbers:"+reftblidsnumbers);
							    	if(mm.find()){
							    		refnewids+="tbl"+mm.group(1)+" ";//refnewids with table & group data 
							    		System.out.println("refnewids:"+refnewids);
							    	}
	//					    		System.out.println("reftblid:"+refstblnumber);
						    		
						    		refnum="";
					    	
					    	}
			    		}
//			    		xmlout1=xmlout1.substring(, endIndex);
			    		
				    	xmlout1=xmlout1.replaceAll("(?is)<ce:cross-refs\\s+id=\"crfs"+refscrfsid+"\"\\s+refid=\"tbl\">"+refstblcontent
				    			+"</ce:cross-refs>", "<ce:cross-refs id=\"crfs"+refscrfsid+"\" refid=\""+refnewids.trim()+"\">"+refstblcontent+"</ce:cross-refs>");//replacing content with refnewids
			    		refscrfsid="";
			    		refstblname="";
			    		refstblnumber="";
			    		refstblcontent="";
			    		refnewids="";
			    		
			    	}
		    	}
		    	
		    	System.out.println("\ttable float-anchors...");
		    	if(xmlout1.matches("(?is)(.*?)<ce:table\\s+([^>]*?)id=\"tbl\\d+\"([^>]*?)>\\s*<ce:label>((?:(?!(?:</ce:label>)).)*?)</ce:label>(.*?)")){
		    		Pattern p = Pattern.compile("(?is)<ce:table\\s+([^>]*?)id=\"tbl(\\d+)\"([^>]*?)>\\s*<ce:label>\\s*(table)\\s*((?:(?!(?:</ce:label>)).)*?)\\s*</ce:label>",Pattern.DOTALL);//pattern for processing float anchors with their refs 		
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	String reftblgroup="";
			    	String reftblid="";
			    	String reftblbeforeid="";
			    	String reftblafterid="";
			    	String reftblname="";
			    	String reftblnumber="";
			    	
			    	while(m.find()){
			    		
			    		reftblgroup=m.group();		
			    		reftblbeforeid=m.group(1);
				    	reftblafterid=m.group(3);
			    		reftblid=m.group(2);
			    		reftblname=m.group(4).trim();
				    	reftblnumber=m.group(5).trim();
			    		
//				    	System.out.println("reftblid:"+reftblgroup);
//				    	System.exit(0);
//				    	System.out.println("reffigid:"+reftblid);
				    	
//				    	xmlout1=xmlout1.replaceAll("(?is)<ce:float-anchor\\s+refid=\"tbl\">\\s*(tables?)(\\s*)"+reftblnumber
//				    			+"\\s*</ce:float-anchor>", "<ce:float-anchor refid=\"tbl"+reftblid+"\">"+"$1 $2"+reftblnumber+"</ce:float-anchor>");
				    	
				    	xmlout1=xmlout1.replaceAll("(?is)<ce:float-anchor\\s+refid=\"tbl\">\\s*(tables?)(\\s*)"+reftblnumber
				    			+"\\s*([,]?)\\s*(.*?)</ce:float-anchor>", "<ce:float-anchor refid=\"tbl"+reftblid+"\">"+"$1 $2"+reftblnumber+"</ce:float-anchor><ce:float-anchor refid=\"tbl\">"+"$4"+"</ce:float-anchor>");
				    	
				    	
				    	reftblgroup="";
				    	reftblbeforeid="";
				    	reftblafterid="";
				    	reftblid="";
				    	reftblname="";
				    	reftblnumber="";
			    	}
			    	xmlout1=xmlout1.replaceAll("(?is)<ce:float-anchor\\s+refid=\"tbl\">\\s*</ce:float-anchor>",""); //replace <ce:float-anchor\\s+refid=\"tbl\">\\s*</ce:float-anchor>") as (empty)
		    	}
		    	
		    	xmlout1=xmlout1.replaceAll("(?s)<ce:cross-ref\\s+([^>]*?)>((?:(?!(?:</ce:cross-ref>)).)*?)</ce:cross-ref>\\s*"
		    			+ "<td:span\\s+class=\"xps_floatoutput\">((?:(?!(?:</td:span>)).)*?)</td:span>","<ce:cross-ref $1>$3</ce:cross-ref>");
		    	
		    	
		    	if(xmlout1.matches("(?s)(.*?)<ce:bib-reference\\s+id=\"bib\\d+\">\\s*<ce:label>([^,]*?)\\s*(,)\\s*((?:(?!(?:</ce:label>)).)*?)\\s*</ce:label>(.*?)")){
		    		System.out.println("\tbibliographic Name-date references...");
		    		
		    		xmlout1=xmlout1.replaceAll("(?s)<ce:cross-ref\\s+id=\"crf(\\d+)\"\\s+refid=\"bib\">((?:(?!(?:</ce:cross-ref>)).)*?)&#([^;]*?);",
		    					"<ce:cross-ref id=\"crf$1\" refid=\"bib\">$2&#$3|");
		    		while(xmlout1.matches("(?s)(.*?)(<ce:cross-ref\\s+id=\"crf(\\d+)\"\\s+refid=\"bib\">((?:(?!(?:</ce:cross-ref>)).)*?)(;\\s*)"
		    				+ "((?:(?!(?:</ce:cross-ref>)).)*?)</ce:cross-ref>)(.*?)")){
//		    			System.out.println("yeass");
		    			xmlout1=xmlout1.replaceAll("(?s)<ce:cross-ref\\s+id=\"crf(\\d+)\"\\s+refid=\"bib\">((?:(?!(?:</ce:cross-ref>)).)*?)(;\\s*)"
		    				+ "((?:(?!(?:</ce:cross-ref>)).)*?)</ce:cross-ref>",
		    					"<ce:cross-ref id=\"crf$1\" refid=\"bib\">$2</ce:cross-ref>$3<ce:cross-ref id=\"crf$1\" refid=\"bib\">$4</ce:cross-ref>");
		    		}
		    		xmlout1=xmlout1.replaceAll("(?s)<ce:cross-ref\\s+id=\"crf(\\d+)\"\\s+refid=\"bib\">((?:(?!(?:</ce:cross-ref>)).)*?)&#([^\\|]*?)\\|",
	    					"<ce:cross-ref id=\"crf$1\" refid=\"bib\">$2&#$3;");
		    		Pattern p = Pattern.compile("<ce:bib-reference\\s+id=\"bib(\\d+)\">\\s*<ce:label>([^,]*?)\\s*(,)\\s*((?:(?!(?:</ce:label>)).)*?)\\s*</ce:label>",Pattern.DOTALL);		//pattern for bibligrophy references
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	String refitemgroup="";
			    	String refitemid="";
//			    	String refitemlabel="";
			    	String refitemname="";
			    	String refitemyear="";
			    	
			    	while(m.find()){
			    		
			    		refitemgroup=m.group();
				    	refitemid=m.group(1);
//				    	refitemlabel="";
				    	refitemname=m.group(2).trim();
				    	refitemyear=m.group(4).trim();
			    		
				    	xmlout1=xmlout1.replaceAll("(?s)<ce:cross-ref\\s+id=\"crf(\\d+)\"\\s+refid=\"bib\">\\s*"+refitemname+"(\\s*[,]?\\s*)(\\s*[\\(]?\\s*)"+refitemyear
				    			+"(\\s*[\\)]?\\s*)\\s*</ce:cross-ref>", "<ce:cross-ref id=\"crf$1\" refid=\"bib"+refitemid+"\">"+refitemname+"$2$3"+refitemyear+"$4</ce:cross-ref>");//replace (bibliography data) as (refitemid,name,year)
				    	
			    		refitemgroup="";
				    	refitemid="";
//				    	refitemlabel="";
				    	refitemname="";
				    	refitemyear="";
			    	}
		    	}
		    	
		    	if(xmlout1.matches("(?s)(.*?)<ce:cross-ref\\s+id=\"crf(\\d+)\"\\s+refid=\"bib\">\\s*\\[([^\\]]*?)\\]\\s*</ce:cross-ref>(.*?)")){
		    		System.out.println("\tbibliographic Numbered references...");
		    		
		    		Pattern pnum = Pattern.compile("<ce:bib-reference\\s+id=\"(bib\\d+)\">\\s*<ce:label>\\s*\\[([^\\]]*?)\\]\\s*</ce:label>",Pattern.DOTALL);		//pattern for bibligrophy references
			    	java.util.regex.Matcher mnum=pnum.matcher(xmlout1);
		    		String bibid_bibnum="|";
		    		String temp_bibid_bibnum="";
		    		
			    	while(mnum.find()){
			    		bibid_bibnum+="|"+mnum.group(1)+"|"+mnum.group(2).trim()+"|";
			    	}
			    	bibid_bibnum+="|";
			    	temp_bibid_bibnum=bibid_bibnum;
//		    		System.out.println("bibid_bibnum: "+bibid_bibnum);
//		    		System.exit(0);
		    		Pattern p = Pattern.compile("<ce:cross-ref\\s+id=\"crf(\\d+)\"\\s+refid=\"bib\">\\s*(\\[([^\\]]*?)\\])\\s*</ce:cross-ref>",Pattern.DOTALL);		//pattern for bibligrophy references
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	String refitemgroup="";
			    	String refitemid="";
//			    	String refitemlabel="";
			    	String refitemnumber="";
			    	String refitemnumbergroup="";
			    	String resultid="";
			    	
			    	while(m.find()){
			    		
			    		refitemgroup=m.group();
				    	refitemid=m.group(1);
//				    	refitemlabel="";
				    	refitemnumbergroup=m.group(2).trim();
				    	refitemnumber=m.group(3).trim();
//				    	refitemyear=m.group(4).trim();
				    	refitemnumber=refitemnumber.replaceAll("(?s),", "||");
				    	refitemnumber=refitemnumber.replaceAll("(?s)&#8211;", "|&#8211;|");
				    	refitemnumber="|"+refitemnumber.replaceAll("(?s)\\s+", "")+"|";
				    	while(!refitemnumber.equals("")){
				    		
				    		
				    		Pattern ptemp = Pattern.compile("(?s)^\\|([^\\|]*?)\\|(&#8211;\\|([^\\|]*?)\\|)?",Pattern.DOTALL);		//pattern for bibligrophy references
					    	java.util.regex.Matcher mtemp=ptemp.matcher(refitemnumber);
					    	String mtempgroup="";
					    	String mtempgroup1="";
					    	String refrange="";
					    	String refrangeend="";
					    	temp_bibid_bibnum=bibid_bibnum;
					    	if(mtemp.find()){
					    		mtempgroup=mtemp.group(0);
						    	mtempgroup1=mtemp.group(1);
						    	refrange=mtemp.group(2);
						    	refrangeend=mtemp.group(3);
//						    	System.out.println("refrange:"+refrange+"\ntemp_bibid_bibnum:"+temp_bibid_bibnum);
						    	if((refrange!=null)){
						    		temp_bibid_bibnum=temp_bibid_bibnum.replaceAll("(?s)^(.*?)(\\|\\|(bib\\d+)\\|"+mtempgroup1+"\\|\\|)(.*?)"
						    				+ "(\\|\\|(bib\\d+)\\|"+refrangeend+"\\|\\|)(.*?)$", "$3||$4||$6");
//						    		System.out.println("temp_bibid_bibnum222:"+temp_bibid_bibnum);
						    		while(temp_bibid_bibnum.matches("(?s)(.*?)(\\|\\|(bib\\d+)\\|([^\\|]*?)\\|\\|)(.*?)")){
						    			temp_bibid_bibnum=temp_bibid_bibnum.replaceAll("(?s)(\\|\\|(bib\\d+)\\|([^\\|]*?)\\|\\|)","||$2||");
						    			
//						    			System.out.println("temp_bibid_bibnum1111:"+temp_bibid_bibnum);
						    		}
						    		
						    		temp_bibid_bibnum=temp_bibid_bibnum.replaceAll("(?s)(bib\\d+)"," $1");
						    		temp_bibid_bibnum=temp_bibid_bibnum.replace("  "," ");
						    		temp_bibid_bibnum=temp_bibid_bibnum.replaceAll("(?s)(\\|)","");
						    						    		
						    	}
						    	else{
						    		temp_bibid_bibnum=temp_bibid_bibnum.replaceAll("(?s)^(.*?)(\\|\\|(bib\\d+)\\|"+mtempgroup1+"\\|\\|)(.*?)$", "$3");
						    	}
						    	
						    	resultid+=temp_bibid_bibnum+" ";
						    	
						    	refitemnumber=refitemnumber.substring(mtemp.end(),refitemnumber.length()).trim();
					    		mtempgroup="";
						    	mtempgroup1="";
						    	refrange="";
						    	refrangeend="";
					    	}
				    		
				    	}
//				    	System.out.println("refitemgroup:"+refitemgroup+"\nresultid:"+resultid+"\nrefitemnumbergroup:"+refitemnumbergroup);
				    	
				    	xmlout1=xmlout1.replaceAll("(?s)\\Q"+refitemgroup+"\\E","<ce:cross-ref id=\"crf"+refitemid+"\" refid=\""+resultid.trim()+"\">"+refitemnumbergroup+"</ce:cross-ref>");
				    	
//				    	xmlout1=xmlout1.replaceAll("(?s)<ce:cross-ref\\s+id=\"crf(\\d+)\"\\s+refid=\"bib\">\\s*\\[\\s*"+refitemnumber+"\\s*\\]"
//				    			+"\\s*</ce:cross-ref>", "<ce:cross-ref id=\"crf$1\" refid=\"bib"+refitemid+"\">["+refitemnumber+"]</ce:cross-ref>");//replace (bibliography data) as (refitemid,name,year)
				    	
			    		refitemgroup="";
				    	refitemid="";
//				    	refitemlabel="";
				    	refitemnumber="";
				    	resultid="";
				    	refitemnumbergroup="";
			    	}
		    	}
//		    	xmlout1=xmlout1.replaceAll("(?s)<(/)?cetd:","<$1ce:");
//		    	xmlout1=xmlout1.replaceAll("(?is)<ce:cross-refs\\s+id=\"crfs([^\"]*?)\"\\s+refid=\"([a-z]+\\d+)\">((?:(?!(?:</ce:cross-refs>)).)*?)</ce:cross-refs>", "<ce:cross-ref id=\"crf$1\" refid=\"$2\">$3</ce:cross-ref>");
		    	return xmlout1;
		    }

//	      generating ids for all sections 
			private String processids(String xmlout1) {
			
		    	System.out.println("Processing IDs for Elements...");
				 
		    	int  idcount=0;
		    	System.out.println("\t...figures");
		    	while(xmlout1.matches("(?s)(.*?)<ce:figure>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:figure>",Pattern.DOTALL);		//pattern for figure id generation 
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:figure id=\"fig"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like fig0005 to fig0010
//			    		grpprp=grpprp.replaceAll("<ce:cross-ref\\s*refid=\"cor\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>", "<ce:cross-ref refid=\"cor"+String.format("%04d", idcount)+"\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>");
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	 idcount=0;
			    	System.out.println("\t...captions");
			    	while(xmlout1.matches("(?s)(.*?)<ce:caption>(.*?)")){
				    	Pattern p = Pattern.compile("<ce:caption>",Pattern.DOTALL);		//pattern for caption id generation
				    	java.util.regex.Matcher m=p.matcher(xmlout1);
				    	if(m.find()){
				    		String grp=m.group();
//				    		String grp1=m.group(1);
				    		String grpprp=xmlout1.substring(0, m.start());
				    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
				    		idcount+=5;
				    		grp="<ce:caption id=\"cap"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like cap0005 to cap0010
				    		xmlout1=grpprp+grp+grppop;
				    	}
			    	}
	    	
//			    	<ce:figcross-ref>
		    		 idcount=0;
			    	System.out.println("\t...Bibolography");
			    	while(xmlout1.matches("(?s)(.*?)<ce:bibliography>(.*?)")){
				    	Pattern p = Pattern.compile("<ce:bibliography>",Pattern.DOTALL);	//pattern for bibliography id generation	
				    	java.util.regex.Matcher m=p.matcher(xmlout1);
				    	if(m.find()){
				    		String grp=m.group();
//				    		String grp1=m.group(1);
				    		String grpprp=xmlout1.substring(0, m.start());
				    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
				    		idcount+=5;
				    		grp="<ce:bibliography id=\"bibl"+String.format("%04d", idcount)+"\">"; //code for automaticly increase id number as like bibl0005 to bibl0010
				    		xmlout1=grpprp+grp+grppop;
				    	}
			    	}
		    	
			    	
			    	idcount=0;
	    			System.out.println("\t\t...Bibliography section");
			    	while(xmlout1.matches("(?s)(.*?)<ce:bibliography-sec>(.*?)")){
				    Pattern p = Pattern.compile("<ce:bibliography-sec>",Pattern.DOTALL);		//pattern for bibliography-sec id generation
				    java.util.regex.Matcher m=p.matcher(xmlout1);
				    	if(m.find()){
				    		String grp=m.group();
//				    		String grp1=m.group(1);
				    		String grpprp=xmlout1.substring(0, m.start());
				    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
				    		idcount+=5;
				    		grp="<ce:bibliography-sec id=\"bibs"+String.format("%04d", idcount)+"\">"; //code for automaticly increase id number as like bibs0005 to bibs0010
				    		xmlout1=grpprp+grp+grppop;
				    	}
			    	} 
			    	
			    	
			    			idcount=0;
		    		
	    			System.out.println("\t\t...Bibliography reference");
			    	while(xmlout1.matches("(?s)(.*?)<ce:bib-reference>(.*?)")){
				    Pattern p = Pattern.compile("<ce:bib-reference>",Pattern.DOTALL);		//pattern for bibliography-reference id generation
				    java.util.regex.Matcher m=p.matcher(xmlout1);
				    	if(m.find()){
				    		String grp=m.group();
//				    		String grp1=m.group(1);
				    		String grpprp=xmlout1.substring(0, m.start());
				    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
				    		idcount+=5;
				    		grp="<ce:bib-reference id=\"bib"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like bib0005 to bib0010
//				    		String grpbiblab=grp+"<ce:label>";
				    		xmlout1=grpprp+grp+grppop;
				    	}
			    	} 
			    	
			    	

	    			idcount=0;
    		
					System.out.println("\t\t...sb reference");
			    	while(xmlout1.matches("(?s)(.*?)<sb:reference>(.*?)")){
				    Pattern p = Pattern.compile("<sb:reference>",Pattern.DOTALL);	//pattern for sb:reference id generation	
				    java.util.regex.Matcher m=p.matcher(xmlout1);
				    	if(m.find()){
				    		String grp=m.group();
//				    		String grp1=m.group(1);
				    		String grpprp=xmlout1.substring(0, m.start());
				    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
				    		idcount+=5;
				    		grp="<sb:reference id=\"sbref"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like sbref0005 to sbref0010
				    		xmlout1=grpprp+grp+grppop;
				    	}
			    	} 
	    	
			    
		    	  idcount=0;
		    	System.out.println("\t...Paragraph");
		    	while(xmlout1.matches("(?s)(.*?)<ce:para>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:para>",Pattern.DOTALL);		//pattern for para id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:para id=\"par"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like bib0005 to bib0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
			    	idcount=0;
			    	System.out.println("\t\t...Equations");
			    	while(xmlout1.matches("(?s)(.*?)<ce:formula>(.*?)")){
				    	Pattern p = Pattern.compile("<ce:formula>",Pattern.DOTALL);		//pattern for equation i.e formula id generation
				    	java.util.regex.Matcher m=p.matcher(xmlout1);
				    	if(m.find()){
				    		String grp=m.group();
//				    		String grp1=m.group(1);
				    		String grpprp=xmlout1.substring(0, m.start());
				    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
				    		idcount+=5;
				    		grp="<ce:formula id=\"eq"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like eq0005 to eq00010
				    		xmlout1=grpprp+grp+grppop;
//				    		System.out.println(xmlout1);
				    	}
			    	}
			    	
			    	
			    	idcount=0;
			    	System.out.println("\t\t...Alt-image for Equations");
			    	while(xmlout1.matches("(?s)(.*?)<mml:math>(.*?)")){
				    	Pattern p = Pattern.compile("<mml:math>",Pattern.DOTALL);	//pattern for Alt-image - Equations id generation	
				    	java.util.regex.Matcher m=p.matcher(xmlout1);
				    	if(m.find()){
				    		String grp=m.group();
//				    		String grp1=m.group(1);
				    		
				    		String grpprp=xmlout1.substring(0, m.start());
				    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
				    		idcount+=1;
				    		grp="<mml:math altimg=\"si"+String.format("%d", idcount)+".gif\">";//code for automaticly increase id number as like si0001 to si0002
				    		xmlout1=grpprp+grp+grppop;
//				    		System.out.println(xmlout1);
				    	}
			    	}
		    	
		    	
		    	 idcount=0;
		    	System.out.println("\t...Correspondence");
		    	while(xmlout1.matches("(?s)(.*?)<ce:correspondence>\\s*<ce:label>(.*?)</ce:label>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:correspondence>\\s*<ce:label>(.*?)</ce:label>",Pattern.DOTALL);	//pattern for Correspondence id generation	
		    		java.util.regex.Matcher m=p.matcher(xmlout1);
//		    		System.out.println("inside correspondance");
			    	if(m.find()){
//			    		System.out.println("inside correspondance1");
			    		String grp=m.group();
			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:correspondence id=\"cor"+String.format("%04d", idcount)+"\"><ce:label>"+grp1+"</ce:label>";//code for automaticly increase id number as like cor0005 to cor0010
			    		//replace and apper code in middle based on output xmlformat of data and code for automaticly increase id number as like cor0005 to cor0010
			    		grpprp=grpprp.replaceAll("(?s)<ce:cross-ref\\s*refid=\"cor\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>",
			    				"<ce:cross-ref refid=\"cor"+String.format("%04d", idcount)+"\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>");
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...Affiliations with labels");
		    	while(xmlout1.matches("(?s)(.*?)<ce:affiliation>\\s*<ce:label>(.*?)</ce:label>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:affiliation>\\s*<ce:label>(.*?)</ce:label>",Pattern.DOTALL);		//pattern for affiliation id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:affiliation id=\"aff"+String.format("%04d", idcount)+"\"><ce:label>"+grp1+"</ce:label>";//code for automaticly increase id number as like aff0005 to aff0010
			    		grpprp=grpprp.replaceAll("(?s)<ce:cross-ref\\s*refid=\"aff\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>",
			    				"<ce:cross-ref refid=\"aff"+String.format("%04d", idcount)+"\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>");
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...Affiliations without labels");
		    	while(xmlout1.matches("(?s)(.*?)<ce:affiliation>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:affiliation>",Pattern.DOTALL);		//pattern for affiliation id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:affiliation id=\"aff"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like aff0005 to aff0010
//			    		grpprp=grpprp.replaceAll("(?s)<ce:cross-ref\\s*refid=\"aff\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>",
//			    				"<ce:cross-ref refid=\"aff"+String.format("%04d", idcount)+"\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>");
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t...Abstract");
		    	while(xmlout1.matches("(?s)(.*?)<ce:abstract>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:abstract>",Pattern.DOTALL);		//pattern for abstract id generation	
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:abstract id=\"abs"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like abs0005 to abs0010
//			    		grpprp=grpprp.replaceAll("<ce:cross-ref\\s*refid=\"cor\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>", "<ce:cross-ref refid=\"cor"+String.format("%04d", idcount)+"\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>");
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t...Abstract-section");
		    	while(xmlout1.matches("(?s)(.*?)<ce:abstract-sec>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:abstract-sec>",Pattern.DOTALL);		//pattern for abstract-section id generation	
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:abstract-sec id=\"abst"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like abst0005 to abst0010
//			    		grpprp=grpprp.replaceAll("<ce:cross-ref\\s*refid=\"cor\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>", "<ce:cross-ref refid=\"cor"+String.format("%04d", idcount)+"\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>");
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	//section id along with view we need to process 
		    	idcount=0;
		    	System.out.println("\t...sections");
		    	while(xmlout1.matches("(?s)(.*?)<ce:section(>|\\s+((?:(?!(?:id=)).)*?)>)(.*?)")){
			    	Pattern p = Pattern.compile("<ce:section(>|\\s+((?:(?!(?:id=)).)*?)>)",Pattern.DOTALL);		//pattern for section id generation	
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:section id=\"sec"+String.format("%04d", idcount)+"\""+grp1; //code for automaticly increase id number as like sec0005 to sec0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    			    	
		    	idcount=0;
		    	System.out.println("\t...section-title");
		    	while(xmlout1.matches("(?s)(.*?)<ce:section-title((?:(?!(?:\\s+id=)).)*?)>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:section-title((?:(?!(?:\\s+id=)).)*?)>",Pattern.DOTALL);		//pattern for section-title id generation	
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:section-title id=\"sect"+String.format("%04d", idcount)+"\""+grp1+">";//code for automaticly increase id number as like sect0005 to sect0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t...simple-para");
		    	while(xmlout1.matches("(?s)(.*?)<ce:simple-para>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:simple-para>",Pattern.DOTALL);		//pattern for simple-para id generation	
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:simple-para id=\"spar"+String.format("%04d", idcount)+"\">"; //code for automaticly increase id number as like spar0005 to spar0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	
		    	idcount=0;
		    	System.out.println("\t...keywords");
		    	while(xmlout1.matches("(?s)(.*?)<ce:keywords\\s+class=(.*?)")){
			    	Pattern p = Pattern.compile("<ce:keywords\\s+class=",Pattern.DOTALL);		//pattern for keywords id generation	
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:keywords id=\"kwd"+String.format("%04d", idcount)+"\" class=";	//code for automaticly increase id number as like kwd0005 to kwd0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...keyword");
		    	while(xmlout1.matches("(?s)(.*?)<ce:keyword>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:keyword>",Pattern.DOTALL);		//pattern for keyword id generation	
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:keyword id=\"kw"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like kw0005 to kw0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	
		    	idcount=0;
		    	System.out.println("\t\t...Author Group");
		    	while(xmlout1.matches("(?s)(.*?)<ce:author-group>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:author-group>",Pattern.DOTALL);		//pattern for author-group id generation	
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:author-group id=\"aug"+String.format("%04d", idcount)+"\">"; //code for automaticly increase id number as like aug0005 to aug0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...Authors");
		    	while(xmlout1.matches("(?s)(.*?)<ce:author>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:author>",Pattern.DOTALL);		//pattern for author id generation	
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:author id=\"aut"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like aut0005 to aut0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	

		    	
		    	idcount=0;
		    	System.out.println("\t\t...Article Title");
		    	while(xmlout1.matches("(?s)(.*?)<ce:title>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:title>",Pattern.DOTALL);		//pattern for title id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:title id=\"tit"+String.format("%04d", idcount)+"\">";//code for automaticly increase id number as like tit0005 to tit0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...Cross reference");
		    	while(xmlout1.matches("(?s)(.*?)<ce:cross-ref\\s+refid=(.*?)")){
			    	Pattern p = Pattern.compile("<ce:cross-ref\\s+refid=",Pattern.DOTALL);		//pattern for crossref id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:cross-ref id=\"crf"+String.format("%04d", idcount)+"\" refid=";	//code for automaticly increase id number as like crf0005 to crf0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...Cross references");
		    	while(xmlout1.matches("(?s)(.*?)<ce:cross-refs\\s+refid=(.*?)")){
			    	Pattern p = Pattern.compile("<ce:cross-refs\\s+refid=",Pattern.DOTALL);		//pattern for crossrefs id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:cross-refs id=\"crfs"+String.format("%04d", idcount)+"\" refid=";//code for automaticly increase id number as like crfs0005 to crfs0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...Email address");
		    	while(xmlout1.matches("(?s)(.*?)<ce:e-address\\s+type=(.*?)")){
			    	Pattern p = Pattern.compile("<ce:e-address\\s+type=",Pattern.DOTALL);		//pattern for eaddress id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:e-address id=\"eadd"+String.format("%04d", idcount)+"\" type="; //code for automaticly increase id number as like eadd0005 to eadd0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	
		    	idcount=0;
		    	System.out.println("\t\t...Inter-ref");
		    	while(xmlout1.matches("(?s)(.*?)<ce:inter-ref\\s+xlink:href=(.*?)")){
//		    		System.out.println("gfsdcxc ");
			    	Pattern p = Pattern.compile("<ce:inter-ref\\s+xlink:href=",Pattern.DOTALL);		//pattern for inter-ref id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:inter-ref id=\"intr"+String.format("%04d", idcount)+"\" xlink:href=";	//code for automaticly increase id number as like intr0005 to intr0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...tables");
		    	while(xmlout1.matches("(?s)(.*?)<ce:table((?:(?!(?:\\s+id=|-footnote)).)*?)>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:table((?:(?!(?:\\s+id=|-footnote)).)*?)>",Pattern.DOTALL);		//pattern for table id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:table id=\"tbl"+String.format("%04d", idcount)+"\""+grp1+">";	//code for automaticly increase id number as like tbl0005 to tbl0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	
		    	/*idcount=0;
		    	System.out.println("\t\t...Colspec");
		    	while(xmlout1.matches("(?s)(.*?)<tgroup>\\s*<colspec/>(.*?)")){
//		    		System.out.println("gfsdcxc ");
		    		idcount=0;
			    	Pattern p = Pattern.compile("<colspec/>\\s*(<colspec/>|<thead|<tbody)",Pattern.DOTALL);		
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=1;
			    		grp="<colspec colname=\"col"+String.format("%d", idcount)+"\"/>";
//			    		grpprp=grpprp.replaceAll("<ce:cross-ref\\s*refid=\"cor\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>", "<ce:cross-ref refid=\"cor"+String.format("%04d", idcount)+"\"><ce:sup>"+grp1+"</ce:sup></ce:cross-ref>");
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}*/
		    	
		    	idcount=0;
		    	System.out.println("\t\t...tablefootnote");
		    	while(xmlout1.matches("(?s)(.*?)<ce:table-footnote>(.*?)")){
//		    		System.out.println("gfsdcxc ");
			    	Pattern p = Pattern.compile("<ce:table-footnote>",Pattern.DOTALL);		//pattern for tablefoot-note id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:table-footnote id=\"tblfn"+String.format("%04d", idcount)+"\">";	//code for automaticly increase id number as like tblfn0005 to tblfn0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...note-para");
		    	while(xmlout1.matches("(?s)(.*?)<ce:note-para>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:note-para>",Pattern.DOTALL);		//pattern for note-para id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:note-para id=\"npar"+String.format("%04d", idcount)+"\">";	//code for automaticly increase id number as like npr0005 to npr0010
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...Acknowledgement");
		    	while(xmlout1.matches("(?s)(.*?)<ce:acknowledgment>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:acknowledgment>",Pattern.DOTALL);		//pattern for Acknowledgement id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:acknowledgment id=\"ack"+String.format("%04d", idcount)+"\">";	//code for automaticly increase id number as like ack0005 to ack0010
			    		
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...Grant-sponsors");
		    	while(xmlout1.matches("(?s)(.*?)<ce:grant-sponsor(\\d+)>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:grant-sponsor(\\d+)>",Pattern.DOTALL);		//pattern for grant sponsor id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount=Integer.parseInt(grp1)*5;
			    		grp="<ce:grant-sponsor id=\"gs"+String.format("%04d", idcount)+"\">";	//code for automaticly increase id number as like gs0005 to gs0010
			    		
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...Grant-number");
		    	while(xmlout1.matches("(?s)(.*?)<ce:grant-number(\\d+)>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:grant-number(\\d+)>",Pattern.DOTALL);		//pattern for grant number id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount=Integer.parseInt(grp1)*5;
			    		grp="<ce:grant-number refid=\"gs"+String.format("%04d", idcount)+"\">";	//code for automaticly increase id number as like gs0005 to gs0010
			    		
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	idcount=0;
		    	System.out.println("\t\t...e-components");
		    	while(xmlout1.matches("(?s)(.*?)<ce:e-component>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:e-component>",Pattern.DOTALL);		//pattern for Acknowledgement id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:e-component id=\"upi"+String.format("%04d", idcount)+"\">";	//code for automaticly increase id number as like ack0005 to ack0010
			    		
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	idcount=0;
		    	System.out.println("\t\t...list");
		    	while(xmlout1.matches("(?s)(.*?)<ce:list>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:list>",Pattern.DOTALL);		//pattern for ce:list-item id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:list id=\"lis"+String.format("%04d", idcount)+"\">";	//code for automaticly increase id number as like ack0005 to ack0010
			    		
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	idcount=0;
		    	System.out.println("\t\t...list-item");
		    	while(xmlout1.matches("(?s)(.*?)<ce:list-item>(.*?)")){
			    	Pattern p = Pattern.compile("<ce:list-item>",Pattern.DOTALL);		//pattern for ce:list-item id generation
			    	java.util.regex.Matcher m=p.matcher(xmlout1);
			    	if(m.find()){
			    		String grp=m.group();
//			    		String grp1=m.group(1);
			    		String grpprp=xmlout1.substring(0, m.start());
			    		String grppop=xmlout1.substring(m.end(),xmlout1.length());
			    		idcount+=5;
			    		grp="<ce:list-item id=\"lst"+String.format("%04d", idcount)+"\">";	//code for automaticly increase id number as like ack0005 to ack0010
			    		
			    		xmlout1=grpprp+grp+grppop;
			    	}
		    	}
		    	
		    	
		    	
		    	
		    	
				return xmlout1;
			}
//	processing all common tag elements for corresponding input and output file 
			private String processcommontags(String xmlout1) {
		    	System.out.println("Processing common Elements...");
		    	xmlout1=xmlout1.replaceAll("<td:em\\s*>", "<ce:italic>");
		    	xmlout1=xmlout1.replaceAll("</td:em\\s*>", "</ce:italic>");
		    	xmlout1=xmlout1.replaceAll("<td:sub\\s*>", "<ce:inf>");
		    	xmlout1=xmlout1.replaceAll("</td:sub\\s*>", "</ce:inf>");
		    	xmlout1=xmlout1.replaceAll("<td:strong\\s*>", "<ce:bold>");
		    	xmlout1=xmlout1.replaceAll("</td:strong\\s*>", "</ce:bold>");
		    	
		    	xmlout1=xmlout1.replaceAll("<td:span\\s+class=\"xps_ndash\">&#8211;</td:span>", "&#8211;");
		    	xmlout1=xmlout1.replaceAll("<td:span\\s+class=\"xps_thinspace\">&#8201;</td:span>", "<ce:hsp sp=\"0.25\"/>");
		    	
		    	xmlout1=xmlout1.replaceAll("<td:sup\\s*>", "<ce:sup>");
		    	xmlout1=xmlout1.replaceAll("</td:sup\\s*>", "</ce:sup>");
		    	
		    	xmlout1=xmlout1.replaceAll("(?si)&lt;GS(\\d+)&gt;","<ce:grant-sponsor$1>");	//processing grantsponsor
		    	xmlout1=xmlout1.replaceAll("(?si)&lt;/GS(\\d+)&gt;","</ce:grant-sponsor>");	//processing grantsponsor
		    	xmlout1=xmlout1.replaceAll("(?si)&lt;GN(\\d+)&gt;","<ce:grant-number$1>");	//processing grantnumber
		    	xmlout1=xmlout1.replaceAll("(?si)&lt;/GN(\\d+)&gt;","</ce:grant-number>");	//processing grantnumber
		    	
//		    	xmlout1=xmlout1.replaceAll("(?s)\\s*<td:span\\s+class=\"xps_interref\">((?:(?!(?:</?td:span>)).*?))</td:span>(.*?)", "<ce:inter-ref id> xlink:href>\"$1\"</ce:inter-ref>");
		    	
		    	
		    	
		    	return xmlout1;
			}
				//writting a xml file 
			private void processxmlout(String xmlout2) throws IOException {
		    	System.out.println("Writing Xml file...");
//		    	System.out.println(xmlout2);
		    	int tdcount=0;
		    	if(xmlout2.matches("(?s)(.*?)<ce:cross-refs?([^>]*?)\\s+refid=\"[a-z]+\">(.*?)")){
		    		Pattern p = Pattern.compile("<ce:cross-refs?([^>]*?)\\s+refid=\"[a-z]+\">",Pattern.DOTALL);		//pattern for crossrefs writting in xml 
		    		java.util.regex.Matcher m=p.matcher(xmlout2);
			        int tdstrprp=0;
			        int tdstrpop=0;
			        String tdstr="";
//			        String tdstr1="";
			        while(m.find()){
			        	++tdcount;				//if <td(or)</td:> find means increase tdcount value 	
			        	tdstr=m.group();
			        	tdstrprp=m.start();
			        	tdstrpop=m.end();
			        	tdstr=xmlout2.substring(tdstrprp-100, tdstrprp)+tdstr+xmlout2.substring(tdstrpop, tdstrpop+100);
			        	//writting xml error count values i.e (<td:|</td:>)to text file file 
			        	String err1="\nError[E"+tdcount+"]: Xml Not Converted properly as there exists some unprocessed information. Please check!\n"+m.group()+" in\n....."+tdstr+".....\n";
						 System.out.println(err1);
						 byte b[]=err1.getBytes();
						 fos.write(b);
			        }
			        System.exit(tdcount);
		    	}
		    	if(xmlout2.matches("(?s)(.*?)<ce:float-anchor([^>]*?)\\s+refid=\"[a-z]+\">(.*?)")){
		    		Pattern p = Pattern.compile("<ce:float-anchor([^>]*?)\\s+refid=\"[a-z]+\">",Pattern.DOTALL);		//pattern for float-anchors writting in xml 
		    		java.util.regex.Matcher m=p.matcher(xmlout2);
			        int tdstrprp=0;
			        int tdstrpop=0;
			        String tdstr="";
//			        String tdstr1="";
			        while(m.find()){
			        	++tdcount;		//if <td(or)</td:> find means increase tdcount value 
			        	tdstr=m.group();
			        	tdstrprp=m.start();
			        	tdstrpop=m.end();
			        	tdstr=xmlout2.substring(tdstrprp-100, tdstrprp)+tdstr+xmlout2.substring(tdstrpop, tdstrpop+100);
			        	//writting xml error count values i.e (<td:|</td:>)to text file file
			    		String err1="\nError[E"+tdcount+"]: Xml Not Converted properly as there exists some unprocessed information. Please check!\n"+m.group()+" in\n....."+tdstr+".....\n";
						 System.out.println(err1);
						 byte b[]=err1.getBytes();
						 fos.write(b);
			        }
			        System.exit(tdcount);
		    	}
		    	if(xmlout2.matches("(?s)(.*?)(<td:([^>]*?)>|</td:([^>]*?)>)(.*?)")){
//		    		System.out.println("addfsdgsd...");
		    		Pattern p = Pattern.compile("(<td:([^>]*?)>|</td:([^>]*?)>)",Pattern.DOTALL);		//pattern for any <td:/</td: in  writting in xml means throw error 
		    		java.util.regex.Matcher m=p.matcher(xmlout2);
			        int tdstrprp=0;
			        int tdstrpop=0;
			        String tdstr="";
//			        String tdstr1="";
			        while(m.find()){
			        	++tdcount;			//if <td(or)</td:> find means increase tdcount value 	
			        	tdstr=m.group();
			        	tdstrprp=m.start();
			        	tdstrpop=m.end();
			        	tdstr=xmlout2.substring(tdstrprp-100, tdstrprp)+tdstr+xmlout2.substring(tdstrpop, tdstrpop+100);
			        	//writting xml error count values i.e (<td:|</td:>)to text file file
			    		String err1="\nError[E"+tdcount+"]: Xml Not Converted properly as there exists some unprocessed information. Please check!\n"+m.group()+" in\n....."+tdstr+".....\n";
						 System.out.println(err1);
						 byte b[]=err1.getBytes();
						 fos.write(b);
			        }
			        System.exit(tdcount);//no of <td:>|</td:>
		    	}else
		    	{
		    //if there is no errors like (<td:|</td:>) means writtng correct xml file generation in input path directory 
			    	try
			        {
			          
			          File file = new File(xmldirpath);
			          
			          FileOutputStream fileOutputStream=new FileOutputStream(file);
			          fileOutputStream.write(xmlout.getBytes());
			          fileOutputStream.close();
				      System.out.println("Done!!!!!!");
			        }
			    	catch (IOException e)
			        {
			          e.printStackTrace();
			        }
		    	}
			}
			
//		processing floatinfo method code
			public static String FloatsInfo(String str4) throws IOException {
				System.out.println("Processing Floats-Info...");
			
//				System.out.println("floats_strdata:..."+str4);
				String  floats_str="";	//floats_str string declaration 
				
				Pattern p = Pattern.compile("^(.*?)<td:div\\s*id=\"xps_float\">(.*?)</td:div>",Pattern.DOTALL);		//pattern to fetch exact floatinfo data 

		        java.util.regex.Matcher m=p.matcher(str4);	 

		        if (m.find()) 
		    	{
//		     		System.out.println("hi"+m.group());
		        	floats_str=m.group(2);	//contain complete floatinfo data
//		        	
		    		int prepos=0;
		    		int postpos=0;
		    		prepos=m.start();
		    		postpos=m.end();
		    		str=m.group(1)+str4.substring(postpos,str4.length());
//		    		
		     		floats_str=ProcessFloatsInfo(floats_str);	//processing floatinfo method to process all information in floats
		    	}
		       
		        
		        floats_str=floats_str.replaceAll("(?s)<td:span\\s+([^>]*?)class=\"xps_ndreflinking\"([^>]*?)>((?:(?!(?:</?td:span)).)*?)</td:span>"
						+ "\\s*<td:span\\s+([^>]*?)class=\"xps_ndrefoutput\"([^>]*?)>((?:(?!(?:</?td:span)).)*?)</td:span>",
						"<ce:cross-ref refid=\"bib\">$6</ce:cross-ref>");
		        floats_str=floats_str.replaceAll("(?s)<td:span\\s+([^>]*?)class=\"xps_reflinking\"([^>]*?)>((?:(?:(?!</?td:span)).)*?)</td:span>"
						+ "\\s*<td:span\\s+([^>]*?)class=\"xps_refoutput\"([^>]*?)>((?:(?:(?!</?td:span)).)*?)</td:span>",
						"<ce:cross-ref refid=\"bib\">$6</ce:cross-ref>");
				
		        floats_str=floats_str.replaceAll("(?s)<td:span\\s+([^>]*?)class=\"xps_ndreflinking\"([^>]*?)>((?:(?:(?!</?td:span)).)*?)</td:span>",
						"<ce:cross-ref refid=\"bib\">$3</ce:cross-ref>");
		        floats_str=floats_str.replaceAll("(?s)<td:span\\s+([^>]*?)class=\"xps_reflinking\"([^>]*?)>((?:(?:(?!</?td:span)).)*?)</td:span>",
						"<ce:cross-ref refid=\"bib\">$3</ce:cross-ref>");
		        
		        floats_str="<ce:floats>"+floats_str+"</ce:floats>";	//hardcode inserting of floats xml titles
//		        System.out.println("floats_strgroup:..."+floats_str);
				return floats_str;
			}
				private static String ProcessFloatsInfo(String arg_floats_str) throws IOException {
//					String localfloats_str=arg_floats_str;
//			declaring String varibles  for floatsinfo
					Global_floats_str=arg_floats_str;
					String figure_str="";
					String table_str="";
					String textbox_str="";
					String ecomponent_str="";
//					String Float="";
//					System.out.println("floats_str:..."+localfloats_str);
					
					figure_str=ProcessfigureInfo(Global_floats_str);			//declaring a method for figure info 
					table_str=ProcesstableInfo(Global_floats_str);				//declaring a method for table info 
					textbox_str=ProcesstextboxInfo(Global_floats_str);			//declaring a method for textbox info 
					ecomponent_str=ProcessecomponentInfo(Global_floats_str);	//declaring a method for ecomponent info 
					
//					 System.out.println("figure_copyinfodata:"+Global_floats_str);
//						System.exit(0);
				
					//log.txt file error messing Information  writting 
					if(!Global_floats_str.trim().equals("")){
						String err1="Error[24]: Floats Information Not processed properly as there exists some unprocessed information - \n\'"+Global_floats_str.trim()+"\'. \nPlease check!\n";
			    		System.out.println(err1);
			    		byte b[]=err1.getBytes();
			    		fos.write(b);
			    		System.exit(24);
					
					}
			
										
					return figure_str+table_str;
				}
				
				//processing figure information with global floats str 
					private static String ProcessfigureInfo(String localfloats_str) {
						System.out.println("\tFigures...");
						String localfigure=localfloats_str;
						String figure_str="";
//						System.out.println("localfigure:"+localfigure);
						while(localfigure.matches("(?s)(.*?)(<td:p\\s*class=\"fig\"([^>]*?)>(.*?)</td:p>)(.*?)")){
//							System.out.println("insidefigure_str:");
							Pattern p = Pattern.compile("<td:p\\s*class=\"fig\"([^>]*?)>(.*?)</td:p>",Pattern.DOTALL);		//pattern for fetch fig info  
					        java.util.regex.Matcher m=p.matcher(localfigure);
					        if(m.find()){
					        	figure_str=figure_str+m.group();
					        	localfigure=localfigure.substring(0,m.start())+localfigure.substring(m.end(), localfigure.length());
//					        	System.out.println("figure_str:"+figure_str);
//					        	System.out.println("localfigurelocalfigure:"+localfigure);
					        	
					        }
						}
						
						Global_floats_str=localfigure;
						Globalpii=Globalpii.replaceAll("[-\\(\\)]+", "");//replace )/-/( in pii as empty
						figure_str=figure_str.replaceAll("(?s)<td:p\\s*class=\"fig\"([^>]*?)>\\s*<td:span\\s*class=\"xps_label\">((?:(?!(?:</?td:span\\s*)).)*?)</td:span>"
								+ "(.*?)(<td:span\\s*class=\"xps_Image\">((?:(?!(?:</?td:span\\s*)).)*?)</td:span>)\\s*</td:p>\\s*","<ce:figure><ce:label>$2</ce:label>"
										+ "<ce:caption><ce:simple-para>$3</ce:simple-para></ce:caption><ce:link locator=\"$5\" xlink:href=\"pii:"+Globalpii+"/$5\" xlink:type=\"simple\"/></ce:figure>");//replacing floatinfo value with global pii only in number format 
						
//						System.out.println("figure_str:"+figure_str);
//						System.exit(0);
						
						return figure_str;
					}
					
				
					//processing figure information with global floats str 
						private static String ProcesstableInfo(String localfloats_str) {
							System.out.println("\tTables..");
							String localtable=localfloats_str;
							String table_str="";
										
							
//							System.out.println("localtablebefore.."+localtable);
							
							
							while(localtable.matches("(?s)(.*?)(<td:p\\s*class=\"tab\"([^>]*?)>(.*?)</td:p>)(.*?)")){
//								System.out.println("insidefigure_str:");
								Pattern p = Pattern.compile("<td:p\\s*class=\"tab\"([^>]*?)>(.*?)</td:p>((?:(?:\\s*<td:table\\s+([^>]*?)>(.*?)</td:table>\\s*)+)+)(((\\s*<td:p\\s*class=\"(tnote|tfoot)\"([^>]*?)>(.*?)</td:p>\\s*)+)+)*",Pattern.DOTALL);//pattern for fetch table info i.e table inside table also allowed		
						        java.util.regex.Matcher m=p.matcher(localtable);
						        if(m.find()){
						        	table_str=table_str+m.group();//fetch all tables in this group table1...table6 information avaliable
						        	localtable=localtable.substring(0,m.start())+localtable.substring(m.end(), localtable.length());
//						        	System.out.println("figure_str:"+table_str);
						        	
						        }
							}
							Global_floats_str=localtable;//assigining Global_floats_str to localtable

												
							while(table_str.matches("(?s)(.*?)<([^>]*?)(\\s+(style|height|width|cellpadding|cellspacing|border)=\"([^\"]*?)\")(.*?)")){
//								System.out.println("hgfdhvf");
								table_str=table_str.replaceAll("(?s)<([^>]*?)((style|height|width|cellpadding|cellspacing|border)=\"([^\"]*?)\")([^>]*?)>","<$1$5>");
								
							}
							
							table_str=table_str.replaceAll("(?s)\\s*<td:td([^>]*?)\\s+align=\"([^\"]*?)\"([^>]*?)>(\\s*<td:p([^>]*?)>\\s*<td:span\\s+class=\"char_plusmn\"([^>]*?)>)",
									"<td:td$1 $3>$4");

							table_str=table_str.replaceAll("(?s)</td:table>\\s*<td:table\\s*([^>]*?)>","</tgroup><tgroup>");
							
							table_str=table_str.replaceAll("(?s)\\s*<td:p\\s+class=\"tab\"([^>]*?)>\\s*<td:span\\s*class=\"xps_label\">((?:(?!(?:</?td:span\\s*)).)*?)</td:span>"
								+ "\\s*(.*?)\\s*</td:p>\\s*(<td:table\\s+([^>]*?)>(.*?)</td:table>)\\s*(((\\s*<td:p\\s*class=\"(tnote|tfoot)\"([^>]*?)>(.*?)</td:p>\\s*)+)+)*", "<ce:table $5 rowsep=\"0\" colsep=\"0\">"
										+ "<ce:label>$2</ce:label><ce:caption><ce:simple-para>$3</ce:simple-para></ce:caption><td:table><tgroup>$6</tgroup>$7</td:table></ce:table>");
							
							table_str=table_str.replaceAll("(?s)\\s*<td:p\\s+class=\"(tnote)\"([^>]*?)>(.*?)</td:p>\\s", "<ce:legend><ce:simple-para>$3</ce:simple-para></ce:legend>");
							table_str=table_str.replaceAll("(?s)\\s*<td:p\\s+class=\"(tfoot)\"([^>]*?)>\\s*<ce:sup>(.*?)</ce:sup>\\s*(.*?)</td:p>\\s", "<ce:table-footnote><ce:label>$3</ce:label><ce:note-para>$4</ce:note-para></ce:table-footnote>");
							table_str=table_str.replaceAll("(?s)\\s*<td:thead>(.*?)</td:thead>\\s*", "<thead valign=\"top\">$1</thead>");
							table_str=table_str.replaceAll("(?s)\\s*<td:tbody>(.*?)</td:tbody>\\s*", "<tbody>$1</tbody>");
//							table_str=table_str.replaceAll("(?s)\\s*<td:table>(.*?)</td:table>\\s*", "<ce:table>$1</ce:table>");	
							table_str=table_str.replaceAll("(?s)\\s*<td:tr\\s*>\\s*", "<row>");
//							table_str=table_str.replaceAll("(?s)\\s*<td:tr>\\s*", "<row>");
							table_str=table_str.replaceAll("(?s)\\s*</td:tr>\\s*", "</row>");
							table_str=table_str.replaceAll("(?s)\\s*<td:td\\s+class=\"rule\"\\s+(align=\"([^>]*?)\")?([^>]*?)>\\s*<td:p\\s+([^>]*?)>(.*?)</td:p>\\s*</td:td>\\s*", "<entry class=\"rule\" $1$3>$5</entry>");
							table_str=table_str.replaceAll("(?s)\\s*<td:td\\s+role=\"rowhead\"\\s+(align=\"([^>]*?)\")?([^>]*?)>\\s*<td:p\\s+([^>]*?)>(.*?)</td:p>\\s*</td:td>\\s*", "<entry role=\"rowhead\" $1$3>$5</entry>");
							table_str=table_str.replaceAll("(?s)\\s*<td:td\\s+align=\"([^>]*?)\"([^>]*?)>\\s*<td:p\\s+class=\"txt\"([^>]*?)>(.*?)</td:p>\\s*</td:td>\\s*", "<entry align=\"$1\"$2>$4</entry>");
							table_str=table_str.replaceAll("(?s)\\s*<td:td([^>]*?)>\\s*<td:p([^>]*?)>\\s*<td:span\\s+class=\"char_dot\"([^>]*?)>(.*?)</td:span>\\s*</td:p>\\s*</td:td>\\s*", "<entry$1 align=\"char\" char=\".\">$4</entry>");
							table_str=table_str.replaceAll("(?s)\\s*<td:td([^>]*?)>\\s*<td:p([^>]*?)>\\s*<td:span\\s+class=\"char_plusmn\"([^>]*?)>(.*?)</td:span>\\s*</td:p>\\s*</td:td>\\s*", "<entry$1 align=\"char\" char=\"&plusmn;\">$4</entry>");
							table_str=table_str.replaceAll("(?s)\\s*<td:td\\s+class=\"rule\"([^>]*?)>\\s*<td:p([^>]*?)>\\s*<td:span\\s+class=\"char_plusmn\"([^>]*?)>(.*?)</td:span>\\s*</td:p>\\s*</td:td>\\s*", "<entry class=\"rule\" align=\"char\" char=\"&plusmn;\"$1>$4</entry>");
														
							table_str=table_str.replaceAll("(?s)\\s*<td:td\\s*>\\s*<td:p([^>]*?)>\\s*(.*?)\\s*</td:p>\\s*</td:td>\\s*", "<entry>$2</entry>");
//							table_str=table_str.replaceAll("<entry>(.*?)</entry>", "<entry align=\"left\">$1</entry>");	
							
							table_str=table_str.replaceAll("(?s)\\s*<td:td\\s+([^>]*?)((?:colspan|rowspan)=\"([^\"]*?)\")([^>]*?)\\s*>\\s*<td:p([^>]*?)>\\s*(.*?)\\s*</td:p>\\s*</td:td>\\s*", "<entry $1$2$4>$6</entry>");
							
//							table_str=table_str.replaceAll("(?s)\\s*<td:td\\s+([^>]*?)(rowspan=\"([^\"]*?)\")([^>]*?)\\s*>\\s*<td:p([^>]*?)>\\s*(.*?)\\s*</td:p>\\s*</td:td>\\s*", "<entry $1morerows=\"$3\"$4>$6</entry>");
							
							
							//row span and col span count and appear as more rows
								while(table_str.matches("(?s)(.*?)rowspan=(.*?)"))
								{
									
									Pattern papa = Pattern.compile("\\s+rowspan=\"([^\"]*?)\"",Pattern.DOTALL);//pattern for fetch rowspan info 
									java.util.regex.Matcher ma = papa.matcher(table_str);
									if (ma.find())
							    	{
							    		String morerows=ma.group();    //morerows data (morerows=morerows-1)
							    		String morerowscount=ma.group(1); //initial morerows value i.e colspan count=5
							    		int a = (Integer.parseInt(morerowscount)-1);//count-1=>5-1=4-->morerows=4
//							    		int b=--a;
//							    		String morerows1=Integer.toString(a); 
						    			table_str=table_str.replaceAll(morerows, " morerows=\""+Integer.toString(a)+"\"");
						    			 
//						    			System.out.println("morerowcount:"+morerowscount);
//						    			System.out.println("morerows:"+morerows1);
								    }
							    }
								
						    		

							table_str=table_str.replaceAll("(?s)<td:span\\s+class=\"xps_halfrowspace\">&#8211;</td:span>", "<ce:vsp sp=\"0.5\"/>");//replace xps_halfrowspace as ce:vsp sp=\"0.5\"/  
//							table_str=table_str.replaceAll("\\s*<td:span\\s+class=\"char_dot\"([^>]*?)>(.*?)</td:span>\\s*</td:p>\\s*</td:td>\\s*", "<entry align=\"char\" char=\".\">$2</entry>");

							
							table_str=table_str.replaceAll("(?s)\\s*<td:colgroup\\s*>(.*?)</td:colgroup>\\s*", ""); //replace </td:colgroup> as empty
							
//							table_str=table_str.replaceAll("(?s)\\s*<td:col\\s+span=\"([^>]*?)\"\\s*/>\\s*", "<colspec span=/>");
							
							table_str=table_str.replaceAll("(?s)\\s*<td:td([^>]*?)\\s*>\\s*</td:td>\\s*", "<entry$1></entry>");
							table_str=table_str.replaceAll("(?s)<td:span\\s*class=\"xps_tfnlinking\">\\s*<ce:sup>((?:(?!(?:</ce:sup>)).)*?)</ce:sup>\\s*</td:span>", "<ce:cross-ref refid=\"tblfn\"><ce:sup>$1</ce:sup></ce:cross-ref>");
							
							
							table_str=table_str.replaceAll("(?s)\\s*<entry([^>]*?)>\\s*<td:span\\s*class=\"char_plusmn\">(.*?)</td:span>\\s*</entry>", "<entry$1 align=\"char\" char=\"&plusmn;\">$2</entry>");	
						
							while(table_str.matches("(?s)\\s*(.*?)<tgroup([^>]*?)>\\s*(<thead|<tbody)(.*?)")){
								Pattern p = Pattern.compile("(?s)\\s*<tgroup([^>]*?)>\\s*((<thead([^>]*?)>|<tbody([^>]*?)>)\\s*<row([^>]*?)>((?:(?!(?:</?row)).)*?)</row>)",Pattern.DOTALL);//pattern for thead and tbody data fetching group		
						        java.util.regex.Matcher m=p.matcher(table_str);	
						        String columnsinfo="";
						        String group1="";
						        String group2="";
						        String colspecvalue="";
						        int colcount=0;
						        if(m.find())
						        {
						        	group1=m.group(1);
						        	group2=m.group(2);
						        	columnsinfo=m.group(7);
						        
//						        	System.out.println("columnsinfoend:"+columnsinfo);
//						        	System.exit(0);
						        	while(columnsinfo.matches("(?s)\\s*(.*?)<entry([^>]*?)>(.*?)")){
						        		Pattern pp = Pattern.compile("\\s*<entry([^>]*?)>",Pattern.DOTALL);//pattern for entry cols info group
						        		java.util.regex.Matcher mm=pp.matcher(columnsinfo);
						        		String grp="";
								        String grp1="";
						        		if(mm.find()){
						        			grp=mm.group();
						        			grp1=mm.group(1);
							        		Pattern ppp = Pattern.compile("\\s*colspan=\"([^\"]*?)\"",Pattern.DOTALL);//pattern for entry colspan info group
							        		java.util.regex.Matcher mmm=ppp.matcher(grp1);
							        		String colspanvalue="";
							        		if(mmm.find()){
							        			colspanvalue=mmm.group(1);
							        			columnsinfo=columnsinfo.substring(0,mm.start())+columnsinfo.substring(mm.end(),columnsinfo.length());
									        	for(int i=0;i<Integer.parseInt(colspanvalue);i++){
									        		colcount++;
									        		colspecvalue+="<colspec colname=\"col"+colcount+"\"/>";
									        	}
							        		}else{
							        			colcount++;
//								        		columnsinfo=columnsinfo.replaceFirst("<entry([^>]*?)>", "");
								        		columnsinfo=columnsinfo.substring(0,mm.start())+columnsinfo.substring(mm.end(),columnsinfo.length());
								        	  	colspecvalue+="<colspec colname=\"col"+colcount+"\"/>";
//								        	  	System.out.println("grp3:"+columnsinfo);
//								        	  	System.exit(0);
							        		}
							        		colspanvalue="";
						        		}
						        		grp="";
								        grp1="";
						        	}
						        	table_str=table_str.substring(0,m.start())+"<tgroup cols=\""+colcount+"\""+group1+">"+colspecvalue+group2+table_str.substring(m.end(),table_str.length());
						        }
						        columnsinfo="";
						        group1="";
						        group2="";
						        colspecvalue=""; 
						        colcount=0;
							}
							 String rowgroup="";
						     String rowattr="";
						     String beforeentry="";
						     String tempbeforeentry="";
						     String afterentry="";
						     String entrygroup="";
						     String entrygroup4="";
						     String entrygroup5="";
						     String entrygroup6="";
						     String entrygroup7="";
						    
						     while(table_str.matches("(?s)\\s*(.*?)<row([^>]*?)>((?:(?!(?:</?row)).)*?)(<entry((?:(?!(?:</?entry)).)*?)(\\s+colspan=\"([^\"]*?)\")([^>]*?)>)((?:(?!(?:</?row)).)*?)</row>(.*?)")){
//								System.out.println("1");
//								System.exit(0);
								Pattern p = Pattern.compile("<row([^>]*?)>((?:(?!(?:</?row)).)*?)(<entry((?:(?!(?:</?entry)).)*?)(\\s+colspan=\"([^\"]*?)\")([^>]*?)>)((?:(?!(?:</?row)).)*?)</row>",Pattern.DOTALL);	//pattern for row info group	
						        java.util.regex.Matcher m=p.matcher(table_str);	
						        if(m.find()){
//						        	System.out.println("22");
						        	 rowgroup=m.group();
//						        	 System.out.println("rowgroup:"+rowgroup);
						        	 rowattr=m.group(1);
//						        	 System.out.println("rowattr:"+rowattr);
								     beforeentry=m.group(2);
								     tempbeforeentry=beforeentry;
//								     System.out.println("beforeentry:"+beforeentry);
								     afterentry=m.group(8);
//								     System.out.println("afterentry:"+afterentry);
								     entrygroup=m.group(3);
//								     System.out.println("entrygroup:"+entrygroup);
								     entrygroup4=m.group(4);
//								     System.out.println("entrygroup4:"+entrygroup4);
								     entrygroup5=m.group(5);
//								     System.out.println("entrygroup5:"+entrygroup5);
								     entrygroup6=m.group(6);
//								     System.out.println("entrygroup6:"+entrygroup6);
								     entrygroup7=m.group(7);
//								     System.out.println("entrygroup7:"+entrygroup7);
								     
								     int entrycount=0;
								     int namest=0;
								     int nameend=0;
								     while(tempbeforeentry.matches("(?s)\\s*(.*?)<entry([^>]*?)>((?:(?!(?:</?entry)).)*?)</entry>(.*?)")){
//								    	 System.out.println("333");
								    	 Pattern pa = Pattern.compile("<entry([^>]*?)>((?:(?!(?:</?entry)).)*?)</entry>",Pattern.DOTALL);		//pattern for entry  info group
									     java.util.regex.Matcher ma=pa.matcher(tempbeforeentry);
									     String entryvalue="";
//									     String nameendvalue="";
									     if(ma.find()){
									    	 entryvalue=ma.group(1);
									    	 tempbeforeentry=tempbeforeentry.substring(0,ma.start())+tempbeforeentry.substring(ma.end(),tempbeforeentry.length());
									    	 if(entryvalue.matches("(?s)(.*?)\\s+nameend=(.*?)")){
									    		 
									    		 pa = Pattern.compile("\\s+nameend=\"col(\\d+)\"",Pattern.DOTALL);		//pattern for nameend cols info group
									    		 ma=pa.matcher(entryvalue);
									    		 if(ma.find()){
									    			 entrycount=Integer.parseInt(ma.group(1));
									    		 }
									    	 }
									    	 else
									    	 {
									    		 ++entrycount;
									    	 }
									     }
								    	 
//								    	 tempbeforeentry=tempbeforeentry.replaceFirst("(?s)\\s*<entry([^>]*?)>((?:(?!(?:</?entry)).)*?)</entry>", "");
								     }
//								     System.out.println("44");
//								     System.out.println("beforeentry:"+beforeentry);
								     namest=entrycount+1;
								     nameend=entrycount+Integer.parseInt(entrygroup6);
//								     System.out.println("result:"+"<row"+rowattr+">"+beforeentry+"<entry"+entrygroup4+" namest=\""+namest+"\" nameend=\""+nameend+"\""+entrygroup7+">"+afterentry+"</row>");
								     table_str=table_str.substring(0,m.start())+"<row"+rowattr+">"+beforeentry+"<entry"+entrygroup4+" namest=\"col"+namest+"\" nameend=\"col"+nameend+"\""
								     +entrygroup7+">"+afterentry+"</row>"+table_str.substring(m.end(),table_str.length());
								    
						        }			
						        rowgroup="";
							    rowattr="";
							    beforeentry="";
							    tempbeforeentry="";
							    afterentry="";
							    entrygroup="";
							    entrygroup4="";
							    entrygroup5="";
							    entrygroup6="";
							    entrygroup7="";
//							    entrycount=0;
							}
							
							rowgroup="";
							rowattr="";
					        entrygroup="";
							while(table_str.matches("(?s)\\s*(.*?)<row([^>]*?)>(((\\s*<entry([^>]*?)(\\s+class=\"rule\")([^>]*?)>((?:(?!(?:</?entry)).)*?)</entry>\\s*)+)+)</row>(.*?)")){
								Pattern p = Pattern.compile("<row([^>]*?)>(((\\s*<entry([^>]*?)(\\s+class=\"rule\")([^>]*?)>((?:(?!(?:</?entry)).)*?)</entry>\\s*)+)+)</row>",Pattern.DOTALL);	//pattern for entry row info group	
						        java.util.regex.Matcher m=p.matcher(table_str);	
						        if(m.find()){
						        	rowgroup=m.group();
						        	rowattr=m.group(1);
						        	entrygroup=m.group(2);
						        	entrygroup=entrygroup.replaceAll("<entry([^>]*?)(\\s+class=\"rule\")([^>]*?)>", "<entry$1$3>");
						        
						          	table_str=table_str.substring(0,m.start())+"<tdd:row rowsep=\"1\""+rowattr+">"+entrygroup+"</tdd:row>"+table_str.substring(m.end(),table_str.length());
						        }
						        rowgroup="";
						        rowattr="";
						        entrygroup="";
							}  
							table_str=table_str.replaceAll("<(/)?tdd:", "<$1");
							
							table_str=table_str.replaceAll("<entry([^>]*?)(\\s+class=\"rule\")([^>]*?)>", "<entry$1 rowsep=\"1\"$3>");
							
							
							
//							while(table_str.matches("(?s)(.*?)(<tgroup([^>]*?)>((?:(?!(?:</?tgroup)).)*?)</tgroup>)\\s*(<ce:legend([^>]*?)>((?:(?!(?:</?ce:legend)).)*?)</ce:legend>)?(((<ce:table-footnote([^>]*?)>((?:(?!(?:</?ce:table-footnote)).)*?)</ce:table-footnote>)+)+)\\s*</ce:table>(.*?)")){
//								
//								Pattern p=Pattern.compile("(<tgroup([^>]*?)>((?:(?!(?:</?tgroup)).)*?)</tgroup>)\\s*(<ce:legend([^>]*?)>((?:(?!(?:</?ce:legend)).)*?)"
//										+ "</ce:legend>)?(((<ce:table-footnote([^>]*?)>((?:(?!(?:</?ce:table-footnote)).)*?)</ce:table-footnote>)+)+)\\s*</ce:table>",Pattern.DOTALL);
//								 java.util.regex.Matcher m=p.matcher(table_str);	
//								 if(m.find()){
//									 String t;
//								 }
//							}
							
						/*	<td class="rule" align="left">
							<p class="txt" id="editor_para_137">S. No.</p>
							</td>*/
//							localtable=localtable.replaceAll("<td:span\\s*class=\"xps_label\">(.*?)</td:span>","<ce:label>$1</ce:label>");
										
//							System.out.println("localtableAfter:.."+table_str);
//							System.exit(0);
							table_str=table_str.replaceAll("</?td:table>", "");
							return table_str;
						}
						//processing method for floatsinfo textboxes
						private static String ProcesstextboxInfo(String localfloats_str) {
							
							System.out.println("\tTextbox...");
							String localtextbox=localfloats_str;
							String textbox_str="";
//							System.out.println("localtextbox:"+localtextbox);
//							System.out.println("textbox_str:"+textbox_str);
														
							return textbox_str;
						}
						
						
						
						//processing method for floatsinfo Ecomponents
						private static String ProcessecomponentInfo(String localfloats_str) {
							
							System.out.println("\tE-components...");
							String localecomponenet=localfloats_str;
							String ecomponenet_str="";
//							System.out.println("localtextbox:"+localtextbox);
//							System.out.println("ecomponenet_str:"+ecomponenet_str);
														
							return ecomponenet_str;
						}
		
				//processing method for tailinfo 
			public static String TailInfo(String str3) throws IOException {
				System.out.println("Processing Tail-Info...");
//				System.out.println("tailstrData:..."+str3);
				String  tail_str="";
										
				Pattern p = Pattern.compile("^(.*?)<td:div\\s*id=\"xps_ref\">(.*?)</td:div>",Pattern.DOTALL);		//parttern for fetching tailinfo

		        java.util.regex.Matcher m=p.matcher(str3);	 

		        if (m.find()) 
		    	{
//		        	System.out.println("tail_str:..."+str3);
//		        	System.out.println("hi"+m.group());
		        	tail_str=m.group(2);	//contain complete tailinfo data
//		    		str.replace(body_str,"");
		    		int prepos=0;
		    		int postpos=0;
		    		prepos=m.start();
		    		postpos=m.end();
		     		str=m.group(1)+str3.substring(postpos,str3.length());
//		    		;
		     		
		     		tail_str=ProcessTailBiblioInfo(tail_str);	//processing tailbiblo info 
		    	}
		        
		        tail_str="<tail>"+tail_str+"</tail>";			//direct hard code of tail data tags inserting 
				return tail_str;
			}
		
//			processing tailbiblio info
			private static String ProcessTailBiblioInfo(String tail_str) throws IOException {
				String localtail_str=tail_str; 		//assigning values to local variable 
				System.out.println("\tReferences...");
//				System.out.println("tail_str:..."+localtail_str);

				String referencetitle="";
				String referencepara="";
				String Tail="";
				
//					Pattern patt = Pattern.compile("(.*?)",Pattern.DOTALL);
					
//						java.util.regex.Matcher m = patt.matcher(tail_str);
//						if(m.find()) 
//						{
//							localtail_str=m.group();
//							localtail_str=localtail_str.replaceAll("<td:div\\s+id=\"xps_ref\">(.*?)</td:div>","<tail><ce:bibliography>(.*?)</ce:bibliography></tail>");
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:p\\s*class=\"ref\"([^>]*?)>(.*?)</td:p>\\s*", "<ce:section-title>$2</ce:section-title><ce:bibliography-sec>"); 
																				
							
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:p\\s+id=\"([^\"]*?)\">(.*?)</td:p>\\s*", "<ce:bib-reference>$2</ce:bib-reference>"); 
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+class=\"ref_lbl\">((?:(?!(</?td:span\\s*)).)*?)</td:span>\\s*","<ce:label>$1</ce:label>");
							
																
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_gn\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<ce:given-name>$3</ce:given-name>");//replacing ref-gn with <given-name>
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_sn\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<ce:surname>$3</ce:surname>");//replacing sn-gn with <surname>
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_au\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:author>$3</sb:author>");//replacing au with <author>
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_auetal\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:et-al/>");//replacing au with <author>
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_atitle\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:title><sb:maintitle>$3</sb:maintitle></sb:title>");
							
//							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_atitle\"([^>]*?)>(((.*?)(<td:span([^>]*?)>(.*?)</<td:span>)(.*?))+)</td:span>([^<]+)?","<sb:title><sb:maintitle>kkjkk$3</sb:maintitle></sb:title>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_ctitle\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:title><sb:maintitle>$3</sb:maintitle></sb:title>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_ptitle\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:host type=\"journal\"><sb:title><sb:maintitle>$3</sb:maintitle></sb:title>");
							
//							localtail_str=localtail_str.replaceAll("(?s)<td:p\\s+id=\"([^>]*?)>((?:(?!(</?td:span\\s+)).)*?)</td:p>","<ce:bib-reference><sb:reference>$3</sb:reference></ce:bib-reference>");
																
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_jtitle\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:host type=\"journal\"><sb:title><sb:maintitle>$3</sb:maintitle></sb:title>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_btitle\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:host type=\"book\"><sb:title><sb:maintitle>$3</sb:maintitle></sb:title>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_fpage\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:first-page>$3</sb:first-page>");
																				
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_lpage\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:last-page>$3</sb:last-page>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_issue\"([^>]*?)>\\s*[\\(]?\\s*((?:(?!(</?td:span\\s*)).)*?)\\s*[\\)]?\\s*</td:span>([^<]+)?","<sb:issue-nr>$3</sb:issue-nr>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_vol\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:volume-nr>$3</sb:volume-nr>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_yr\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:date>$3</sb:date>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"ref_doi\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?",
									"<ce:doi>$3</ce:doi>");
						
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+([^>]*?)class=\"end_ref_comment\"([^>]*?)>((?:(?!(</?td:span\\s*)).)*?)</td:span>([^<]+)?","<sb:comment>$3</sb:comment>");
							
//							localtail_str=localtail_str.replaceAll("\\s*(?s)<td:span\\s+([^>]*?)class=\"ref_atitle\"([^>]*?)>((?:(?!(<td:span\\s+)).)*?)</td:span>","<sb:title><sb:maintitle>$3</sb:maintitle></sb:title>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s+class=\"ref_pub_name\">(.*?)</td:span>([^<]+)?","<sb:publisher-name>$1</sb:publisher-name>");
							
//							localtail_str=localtail_str.replaceAll("\\s*(?s)<td:span\\s+class=\"ref_pub_name\">(.*?)</td:span>","<sb:publisher><sb:name>$1</sb:name>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<td:span\\s*class=\"ref_pub_place\">(.*?)</td:span>([^<]+)?","<sb:publisher-location>$1</sb:publisher-location>");
							
//							localtail_str=localtail_str.replaceAll("<td:span\\s+class=\"ref_issue\">(.*?)</td:span>","<sb:issue-nr>$1</sb:issue-nr>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*<ce:bib-reference>\\s*(<ce:label>(?:(?:(?!(?:</?ce:label>)).)*?)</ce:label>)"
									+ "\\s*((?:(?!(?:</?ce:bib-reference)).)*?)(<sb:host\\s+(?:[^>]*?))((?:(?!(?:</?ce:bib-reference)).)*?)</ce:bib-reference>\\s*",
									"<ce:bib-reference>$1<sb:reference>$2$3$4</sb:reference></ce:bib-reference>");
							
							localtail_str=localtail_str.replaceAll("(?s)\\s*(<sb:first-page>(.*?)</sb:first-page>)\\s*(<sb:last-page>(.*?)</sb:last-page>)?\\s*",
									"<sb:pages>$1$3</sb:pages>");
							
							
							localtail_str=localtail_str.replaceAll("(?s)((((\\s*<sb:author>((?:(?!(</?sb:author>)).)*?)</sb:author>\\s*)+)+)\\s*(<sb:et-al/>)?)",
									"<sb:authors>$1</sb:authors>");
							
							localtail_str=localtail_str.replaceAll("(?s)((?:<sb:authors>(?:(?:(?!(?:</sb:authors>)).)*?)</sb:authors>)"
									+ "\\s*(?:<sb:title>(?:(?:(?!(?:</sb:title>)).)*?)</sb:title>)?)",
									"<sb:contribution>$1</sb:contribution>");
							
							
							localtail_str=localtail_str.replaceAll("(?s)<sb:host([^>]*?)>((?:(?!(?:</sb:reference>)).)*?)(<sb:host|<sb:comment>)((?:(?!(?:</sb:reference>)).)*?)</sb:reference>",
									"<sb:host$1>$2</sb:host>$3$4</sb:reference>");
							
							localtail_str=localtail_str.replaceAll("(?s)<sb:host([^>]*?)>((?:(?!(?:<sb:host|<sb:comment>|</sb:reference>)).)*?)</sb:reference>",
									"<sb:host$1>$2</sb:host></sb:reference>");
							
							String maintitle="";
							String volno="";
							String issno="";
							String sbpages="";
							String refdoi="";
//							String lastpage="";
							String year="";
							String comment="";
							String publisher="";
//							String publisherlocation="";
							String hosttype="";
							String hostgroup="";
							String hostgrouporg="";
							String hostgroupreplace="";
							
							while(localtail_str.matches("(?s)(.*?)<sb:host\\s+type=\"(journal|book)\">((?:(?!(?:</?sb:host)).)*?)</sb:host>(.*?)")){
								Pattern p = Pattern.compile("<sb:host\\s+type=\"(journal|book)\">((?:(?!(?:</?sb:host)).)*?)</sb:host>",Pattern.DOTALL);	//pattern for sb:host book type group	
								java.util.regex.Matcher m=p.matcher(localtail_str);//	
								if(m.find()){
									hostgroup=m.group();
									hostgrouporg=m.group();
									hosttype=m.group(1);
									p = Pattern.compile("<sb:title>\\s*<sb:maintitle>(.*?)</sb:maintitle>\\s*</sb:title>",Pattern.DOTALL);		//pattern for <sb:title><sb:maintitlegroup> group
									m=p.matcher(hostgroup);
									if(m.find()){
										maintitle=m.group();
										hostgroup=hostgroup.substring(0,m.start())+hostgroup.substring(m.end(),hostgroup.length());
									}
									p = Pattern.compile("<sb:date>(.*?)</sb:date>",Pattern.DOTALL);		//pattern for <sb:date>group 
									m=p.matcher(hostgroup);
									if(m.find()){
										year=m.group();
										hostgroup=hostgroup.substring(0,m.start())+hostgroup.substring(m.end(),hostgroup.length());
									}
									
									p = Pattern.compile("<sb:volume-nr>(.*?)</sb:volume-nr>",Pattern.DOTALL);	//pattern for <sb:volume-nr> group 	
									m=p.matcher(hostgroup);
									if(m.find()){
										volno=m.group();
										hostgroup=hostgroup.substring(0,m.start())+hostgroup.substring(m.end(),hostgroup.length());
									}
									p = Pattern.compile("<sb:issue-nr>(.*?)</sb:issue-nr>",Pattern.DOTALL);		//pattern for <sb:issue-nr> group 	
									m=p.matcher(hostgroup);
									if(m.find()){
										issno=m.group();
										hostgroup=hostgroup.substring(0,m.start())+hostgroup.substring(m.end(),hostgroup.length());
									}
									
									p = Pattern.compile("<sb:pages>(.*?)</sb:pages>",Pattern.DOTALL);		//pattern for <sb:pages> group 	
									m=p.matcher(hostgroup);
									if(m.find()){
										sbpages=m.group();
										hostgroup=hostgroup.substring(0,m.start())+hostgroup.substring(m.end(),hostgroup.length());
									}
									
									p = Pattern.compile("<ce:doi>(.*?)</ce:doi>",Pattern.DOTALL);		//pattern for <sb:pages> group 	
									m=p.matcher(hostgroup);
									if(m.find()){
										refdoi=m.group();
										hostgroup=hostgroup.substring(0,m.start())+hostgroup.substring(m.end(),hostgroup.length());
									}
									
									p = Pattern.compile("<sb:comment>(.*?)</sb:comment>",Pattern.DOTALL);		//pattern for <sb:comment> group 	
									m=p.matcher(hostgroup);
									if(m.find()){
										comment=m.group();
										hostgroup=hostgroup.substring(0,m.start())+hostgroup.substring(m.end(),hostgroup.length());
									}
									
									p = Pattern.compile("\\s*<sb:publisher-name>(.*?)</sb:publisher-name>\\s*(<sb:publisher-location>(.*?)</sb:publisher-location>)?\\s*",Pattern.DOTALL);//pattern for <sb:publisher& location> group 			
									m=p.matcher(hostgroup);
									if(m.find()){
										publisher="<sb:publisher><sb:name>"+m.group(1)+"</sb:name>";
										if(!m.group(3).equals(""))
										{
											publisher=publisher+"<sb:location>"+m.group(3)+"</sb:location>";
										}
										publisher=publisher+"</sb:publisher>";
										hostgroup=hostgroup.substring(0,m.start())+hostgroup.substring(m.end(),hostgroup.length());
									}
									
									if(hosttype.equals("journal")){
										hostgroupreplace="<sb:host type=\"td:journal\"><sb:issue><sb:series>"+maintitle+volno+"</sb:series>"+issno+year+"</sb:issue>"+sbpages+refdoi+"</sb:host>";
									}
									else if(hosttype.equals("book")){
										hostgroupreplace="<sb:host type=\"td:book\"><sb:book>"+maintitle+year+publisher+"</sb:book></sb:host>";
									}
									
									
									localtail_str=localtail_str.replace(hostgrouporg, hostgroupreplace);
									
									hostgroup=hostgroup.replaceAll("<sb:host\\s+type=\"(journal|book)\">\\s*</sb:host>", "").trim();
									hostgroup=hostgroup.trim();
									
									//log.txt file error messing Information  writting 
									if(!hostgroup.equals("")){
										String err1="Error[23]: Reference Item Not processed properly as there exists some unprocessed information - \n\'"+hostgroup+"\'. \nPlease check!\n"+hostgrouporg;
							    		System.out.println(err1);
							    		byte b[]=err1.getBytes();
							    		fos.write(b);
							    		System.exit(23);
									
									}
//									System.out.println("tailData:..."+hostgroup);
									
								}
								
								 maintitle="";
								 volno="";
								 issno="";
								 sbpages="";
								 refdoi="";
//								 lastpage="";
								 year="";
								 comment="";
								 publisher="";
//								 publisherlocation="";
								 hosttype="";
								 hostgroup="";
								 hostgrouporg="";
								 hostgroupreplace="";
							}
							
							
							localtail_str=localtail_str.replaceAll("<td:br\\s*/>","");
							
//							localtail_str=localtail_str.replaceAll("<td:div id=\"xps_ref\">","<tail><ce:bibliography>");
							
//							localtail_str=localtail_str.replaceAll("</td:div>","</ce:bibliography-sec></ce:bibliography></tail>");
	
//							localtail_str=localtail_str.replaceAll("</td:p>","</sb:reference></ce:bib-reference>");

					
//							System.out.println("ReferenceData:\'"+localtail_str+"\'");
					
//							System.out.println("tail_str:..."+localtail_str);
				
//						}
							
					String templocaltail_str=localtail_str;
					templocaltail_str=templocaltail_str.replaceAll("(?s)<ce:bib-reference>((?:(?!(?:</?ce:bib-reference>)).)*?)</ce:bib-reference>", "");
					templocaltail_str=templocaltail_str.replaceAll("(?s)<ce:bibliography-sec>\\s*</ce:bibliography-sec>", "");
					templocaltail_str=templocaltail_str.replaceAll("(?s)<ce:bibliography-sec>\\s*", "");
					templocaltail_str=templocaltail_str.replaceAll("(?s)<ce:section-title>((?:(?!(?:</?ce:section-title>)).)*?)</ce:section-title>", "");
					templocaltail_str=templocaltail_str.trim();
					//log.txt file error messing Information  writting 
					if(!templocaltail_str.equals("")){
						String err1="Error[24]: Below listed context appear outside bib-reference. Please check!\n"+templocaltail_str;
			    		System.out.println(err1);
			    		byte b[]=err1.getBytes();
			    		fos.write(b);
			    		System.exit(24);
					
					}
//							System.out.println("templocaltail_str...."+templocaltail_str);
					localtail_str="<ce:bibliography>"+localtail_str+"</ce:bibliography-sec></ce:bibliography>";
					return localtail_str;
				}
			
			//processing bodyinfo method 
			public static String BodyInfo(String str2) throws IOException {
				System.out.println("Processing Body-Info...");
//				System.out.println("bodystrData:..."+str2);
				String  body_str="";
				Pattern p = Pattern.compile("^(.*?)<td:div\\s*id=\"xps_body\">(.*?)</td:div>",Pattern.DOTALL);		//pattern for fetching bodyinfo
				
//				Pattern p = Pattern.compile^(.*?)(<td:p\\s*class=\"h1\"|<td:div\\s*id=\"xps_body\">
				
		        java.util.regex.Matcher m=p.matcher(str2);//		 

		        if (m.find()) 
		    	{
//		        	System.out.println("bodystrData:..."+str2);
//		        	System.out.println("hi"+m.group());
		        	body_str=m.group(2);		//contain complete bodyinfo data
//		    		str.replace(body_str,"");
		    		int prepos=0;
		    		int postpos=0;
		    		prepos=m.start();
		    		postpos=m.end();
//		    		System.out.println(postpos); 		
//		    		body_str=str2.substring(0,prepos);
		     		str=m.group(1)+str2.substring(postpos,str2.length());
//		    		System.out.println("prepos..."+prepos);
//		    		System.out.println("postpos.."+postpos);
//		    		System.out.println("str:..."+str.substring(0,50));
//		    		System.exit(0);
		    		body_str=ProcessBodyInfo(body_str);
		    	}
		    	
				return body_str;
			}
			private static String ProcessBodyInfo(String body_str) throws IOException {	 //processing bodyinfo fetch all sections in bodypart of xml 
			
				String Body="";
				String localbody_str=body_str.trim();	//assigning values to local variable
												
				System.out.println("\tProcessing Sections...");
				//replacing section titles and sub titels with corresponding size from h1-h6
				while(localbody_str.matches("(?s)(.*?)<td:p\\s*class=\"h1\"([^>]*?)>(.*?)")){
//					System.out.println("ccgcxcxr");
					localbody_str=localbody_str.replaceAll("(?s)^(.*?)<td:p\\s*class=\"h1\"([^>]*?)>(.*?)(<td:p\\s*class=\"h1\"([^>]*?)>|\\s*$)", "$1<ce:section><td:p class=\"sec-h1\"$2>$3</ce:section>$4");
				}
				
				while(localbody_str.matches("(?s)(.*?)<td:p\\s*class=\"h2\"([^>]*?)>(.*?)")){
//					System.out.println("ccgcxcxr");
					localbody_str=localbody_str.replaceAll("(?s)^(.*?)<td:p\\s*class=\"h2\"([^>]*?)>(.*?)((?:(?:</ce:section>)?\\s*(?:<ce:section>)?)*<td:p\\s*class=\"(?:sec-h1|h2)\"([^>]*?)>|(?:(?:</ce:section\\d+>)?\\s*(?:<ce:section\\d+>)?)*\\s*$)", "$1<ce:section><td:p class=\"sec-h2\"$2>$3</ce:section>$4");
				}
				
				while(localbody_str.matches("(?s)(.*?)<td:p\\s*class=\"h3\"([^>]*?)>(.*?)")){
//					System.out.println("ccgcxcxr");
					localbody_str=localbody_str.replaceAll("(?s)^(.*?)<td:p\\s*class=\"h3\"([^>]*?)>(.*?)((?:(?:</ce:section>)?\\s*(?:<ce:section>)?)*<td:p\\s*class=\"(?:sec-h1|sec-h2|h3)\"([^>]*?)>|(?:(?:</ce:section\\d+>)?\\s*(?:<ce:section\\d+>)?)*\\s*$)", "$1<ce:section><td:p class=\"sec-h3\"$2>$3</ce:section>$4");
				}
				
				while(localbody_str.matches("(?s)(.*?)<td:p\\s*class=\"h4\"([^>]*?)>(.*?)")){
//					System.out.println("ccgcxcxr");
					localbody_str=localbody_str.replaceAll("(?s)^(.*?)<td:p\\s*class=\"h4\"([^>]*?)>(.*?)((?:(?:</ce:section>)?\\s*(?:<ce:section>)?)*<td:p\\s*class=\"(?:sec-h1|sec-h2|sec-h3|h4)\"([^>]*?)>|(?:(?:</ce:section\\d+>)?\\s*(?:<ce:section\\d+>)?)*\\s*$)", "$1<ce:section><td:p class=\"sec-h4\"$2>$3</ce:section>$4");
				}
				
				while(localbody_str.matches("(?s)(.*?)<td:p\\s*class=\"h5\"([^>]*?)>(.*?)")){
//					System.out.println("ccgcxcxr");
					localbody_str=localbody_str.replaceAll("(?s)^(.*?)<td:p\\s*class=\"h5\"([^>]*?)>(.*?)((?:(?:</ce:section>)?\\s*(?:<ce:section>)?)*<td:p\\s*class=\"(?:sec-h1|sec-h2|sec-h3|sec-h4|h5)\"([^>]*?)>|(?:(?:</ce:section\\d+>)?\\s*(?:<ce:section\\d+>)?)*\\s*$)", "$1<ce:section><td:p class=\"sec-h5\"$2>$3</ce:section>$4");
				}
				
				
				while(localbody_str.matches("(?s)(.*?)<td:p\\s*class=\"sec-h(\\d+)\"([^>]*?)>(.*?)</td:p>(.*?)"))
				{
		        	String group="";
					String group1="";
					String group2="";
					String group3="";
					String groupprp="";
					String grouppop="";
					Pattern p = Pattern.compile("<td:p\\s*class=\"sec-h(\\d+)\"([^>]*?)>(.*?)</td:p>",Pattern.DOTALL);		//pattern for role and section title group 		
			        java.util.regex.Matcher m=p.matcher(localbody_str);//	
			        if(m.find()){
			        	group=m.group();
						group1=m.group(1);
						group2=m.group(2);
						group3=m.group(3).trim();
						groupprp=localbody_str.substring(0,m.start());
						grouppop=localbody_str.substring(m.end(),localbody_str.length());
						
//						group3=group3.replaceFirst("(?s)^\\s*((\\d+|[A-Z])([.]\\d)*)\\s+(.*?)$", "<ce:label>$1</ce:label><ce:section-title>$4</ce:section-title>").trim();
						
//						if(group3.matches("(?s)^\\s*((\\d+|[A-Z])([.]\\d)*)\\s+(.*?)$"))
//						{
//							group3=group3.replaceFirst("(?s)^\\s*((\\d+|[A-Z])([.]\\d)*)\\s+(.*?)$", "<ce:label>$1</ce:label><ce:section-title>$4</ce:section-title>").trim();
//						}else{
//							group3=("<ce:section-title>"+group3+"</ce:section-title>").trim();
//						}
						
						
//					if role="grey" means we need to output as like role="introduction"><sectiontitle>Introduction</sectiontitle>	
						if(group2.matches("(?s)(.*?)\\s+role=\"grey\"(.*?)")){
							if(group3.matches("(?s)^\\s*((\\d+|[A-Z])([.]\\d)*)\\s+(.*?)$"))
							{
								group3=group3.replaceFirst("(?s)^\\s*((\\d+|[A-Z])([.]\\d)*)\\s+(.*?)\\s*$", "<ce:label>$1</ce:label><ce:section-title role=\"$4\">$4</ce:section-title>").trim();
							}else{
								group3=("<ce:section-title role=\""+group3.toLowerCase()+"\">"+group3+"</ce:section-title>").trim();
							}
						}else
						{
							if(group3.matches("(?s)^\\s*((\\d+|[A-Z])([.]\\d)*)\\s+(.*?)$"))
							{
								group3=group3.replaceFirst("(?s)^\\s*((\\d+|[A-Z])([.]\\d)*)\\s+(.*?)$", "<ce:label>$1</ce:label><ce:section-title>$4</ce:section-title>").trim();
							}else{
								group3=("<ce:section-title>"+group3+"</ce:section-title>").trim();
							}
						}
						
						
						
						
						localbody_str=groupprp+group3+grouppop;
			        }
		        	group="";
					group1="";
					group2="";
					group3="";
					groupprp="";
					grouppop="";
				}

//				localbody_str=localbody_str.replaceAll("(?s)<td:p\\s*class=\"sec-h1\"([^>]*?)>(.*?)</td:p>", " ");
				
				
				
				localbody_str=localbody_str.replaceAll("(?s)\\s*<td:p\\s+([^>]*?)class=\"txt\"([^>]*?)>(.*?)</td:p>\\s*","<ce:para>$3</ce:para>");
//				if(localbody_str.matches("(?s)(.*?)<td:span\\s+class=\"xps_ndreflinking\">((?:(?!(?:</?td:span)).)*?)</td:span>"
//						+ "\\s*<td:span\\s+class=\"xps_ndrefoutput\">((?:(?!(?:</?td:span)).)*?)</td:span>(.*?)")){
//					
//					System.out.println("yes");
//					localbody_str=localbody_str.replaceAll("(?s)<td:span\\s+class=\"xps_ndreflinking\">((?:(?!(?:</?td:span)).)*?)</td:span>"
//							+ "\\s*<td:span\\s+class=\"xps_ndrefoutput\">((?:(?!(?:</?td:span)).)*?)</td:span>",
//							"<ce:cross-ref refid=\"bib\">$2</ce:cross-ref>");
//				}
//				else
//				{
//					System.out.println("No");
//				}
//				System.exit(0);
				localbody_str=localbody_str.replaceAll("(?s)<td:span\\s+([^>]*?)class=\"xps_ndreflinking\"([^>]*?)>((?:(?!(?:</?td:span)).)*?)</td:span>"
						+ "\\s*<td:span\\s+([^>]*?)class=\"xps_ndrefoutput\"([^>]*?)>((?:(?!(?:</?td:span)).)*?)</td:span>",
						"<ce:cross-ref refid=\"bib\">$6</ce:cross-ref>");
				localbody_str=localbody_str.replaceAll("(?s)<td:span\\s+([^>]*?)class=\"xps_reflinking\"([^>]*?)>((?:(?:(?!</?td:span)).)*?)</td:span>"
						+ "\\s*<td:span\\s+([^>]*?)class=\"xps_refoutput\"([^>]*?)>((?:(?:(?!</?td:span)).)*?)</td:span>",
						"<ce:cross-ref refid=\"bib\">$6</ce:cross-ref>");
				
				localbody_str=localbody_str.replaceAll("(?s)<td:span\\s+([^>]*?)class=\"xps_ndreflinking\"([^>]*?)>((?:(?:(?!</?td:span)).)*?)</td:span>",
						"<ce:cross-ref refid=\"bib\">$3</ce:cross-ref>");
				localbody_str=localbody_str.replaceAll("(?s)<td:span\\s+([^>]*?)class=\"xps_reflinking\"([^>]*?)>((?:(?:(?!</?td:span)).)*?)</td:span>",
						"<ce:cross-ref refid=\"bib\">$3</ce:cross-ref>");
				
				
				System.out.println("\tProcessing Equations...");
				while(localbody_str.matches("(?s)\\s*(.*?)<td:p\\s+([^>]*?)class=\"eq\"([^>]*?)>\\s*<td:img\\s+([^>]*?)alt=\"([^>]*?)\"\\s*/>\\s*</td:p>(.*?)\\s*"))
				{
		        	String group="";
					//String group1="";
					//String group2="";
					//String group3="";
					String group4="";
					String groupprp="";
					String grouppop="";
					Pattern p = Pattern.compile("(?s)\\s*<td:p\\s+([^>]*?)class=\"eq\"([^>]*?)>\\s*<td:img\\s+([^>]*?)alt=\"([^>]*?)\"\\s*/>\\s*</td:p>\\s*",Pattern.DOTALL); //pattern for equation and image group 				
			        java.util.regex.Matcher m=p.matcher(localbody_str);//	
			        if(m.find()){
			        	group=m.group();
						//group1=m.group(1);
						//group2=m.group(2);
						//group3=m.group(3).trim();
			        	group4=m.group(4).trim();
			        	group4=processmath(group4);
						groupprp=localbody_str.substring(0,m.start());
						grouppop=localbody_str.substring(m.end(),localbody_str.length());
						localbody_str=groupprp+group4+grouppop;
			        }
		        	group="";
					//group1="";
					//group2="";
					//group3="";
		        	group4="";
					groupprp="";
					grouppop="";
				}
				
				System.out.println("\tProcessing Chemicial Equations...");
				while(localbody_str.matches("(?s)\\s*(.*?)<td:p\\s+([^>]*?)class=\"chem\"([^>]*?)>(.*?)</td:p>(.*?)\\s*"))
				{
		        	String group="";
					//String group1="";
					//String group2="";
					//String group3="";
					String group3="";
					String groupprp="";
					String grouppop="";
					Pattern p = Pattern.compile("(?s)\\s*<td:p\\s+([^>]*?)class=\"chem\"([^>]*?)>(.*?)</td:p>\\s*",Pattern.DOTALL); //pattern for equation and image group 				
			        java.util.regex.Matcher m=p.matcher(localbody_str);//	
			        if(m.find()){
			        	group=m.group();
						//group1=m.group(1);
						//group2=m.group(2);
						//group3=m.group(3).trim();
			        	group3=m.group(3).trim();
			        	group3=processchemmath(group3);
						groupprp=localbody_str.substring(0,m.start());
						grouppop=localbody_str.substring(m.end(),localbody_str.length());
						localbody_str=groupprp+group3+grouppop;
			        }
		        	group="";
					//group1="";
					//group2="";
					//group3="";
		        	group3="";
					groupprp="";
					grouppop="";
				}
				
//				System.out.println("localbody_str:"+localbody_str);
//				System.exit(0);
				
				localbody_str=localbody_str.replaceAll("(?si)<td:span\\s+class=\"xps_floatlinking\">\\s*(Tables)((?:(?!(?:</?td:span>)).)*?)</td:span>", "<ce:cross-refs refid=\"tbl\">$1$2</ce:cross-refs>");
				
				localbody_str=localbody_str.replaceAll("(?si)<td:span\\s+class=\"xps_floatlinking\">\\s*(Table)((?:(?!(?:</?td:span>)).)*?)</td:span>", "<ce:cross-ref refid=\"tbl\">$1$2</ce:cross-ref>");
				
				localbody_str=localbody_str.replaceAll("(?si)\\s*<td:span\\s+class=\"xps_afloatlinking\">\\s*(Table)((?:(?!(?:</?td:span>)).)*?)</td:span>", "<ce:float-anchor refid=\"tbl\">$1$2</ce:float-anchor>");
				
				localbody_str=localbody_str.replaceAll("(?si)<td:span\\s+class=\"xps_floatlinking\">\\s*(figures|figs|schemes)((?:(?!(?:</?td:span>)).)*?)</td:span>", "<ce:cross-refs refid=\"fig\">$1$2</ce:cross-refs>");
				
				localbody_str=localbody_str.replaceAll("(?si)<td:span\\s+class=\"xps_floatlinking\">\\s*(figure|fig|scheme)((?:(?!(?:</?td:span>)).)*?)</td:span>", "<ce:cross-ref refid=\"fig\">$1$2</ce:cross-ref>");
				
				localbody_str=localbody_str.replaceAll("(?si)\\s*<td:span\\s+class=\"xps_afloatlinking\">\\s*(figure|fig|scheme)((?:(?!(?:</?td:span>)).)*?)</td:span>", "<ce:float-anchor refid=\"fig\">$1$2</ce:float-anchor>");
				
				localbody_str=localbody_str.replaceAll("(?s)<td:span\\s+class=\"xps_interref\">\\s*(doi\\s*:\\s*)?\\s*<td:a\\s+href=\"([^\"]*?)\">\\s*"
						+ "((?:(?!(?:</?td:span>)).)*?)\\s*</td:a>\\s*</td:span>","<ce:inter-ref xlink:href=\"doi:$2\">http://dx.doi.org/$2</ce:inter-ref>");
				
				localbody_str=localbody_str.replaceAll("(?s)<td:span\\s+class=\"xps_interref\">\\s*(doi\\s*:\\s*)?((?:(?!(?:</?td:span>)).)*?)</td:span>", "<ce:inter-ref xlink:href=\"http://dx.doi.org/$2\">$1$2</ce:inter-ref>");
				
				System.out.println("Processing Acknowledgements..");
				
				localbody_str=localbody_str.replaceAll("(?s)\\s*<td:p\\s+class=\"ack\"([^>]*?)>\\s*(Acknowledgements?)\\s*</td:p>(((\\s*<ce:para>((?:(?!(?:</?ce:para>)).)*?)</ce:para>\\s*)+)+)",
						"<ce:acknowledgment><ce:section-title>$2</ce:section-title>$3</ce:acknowledgment>");
				
				System.out.println("Processing Appendices..");
				localbody_str=localbody_str.replaceAll("(?s)\\s*(<td:p\\s*class=\"A1\"([^>]*?)>(.*?))\\s*(</ce:section>|$)","<ce:appendices>$1</ce:appendices>$4");
				
				localbody_str=localbody_str.replaceAll("(?s)\\s*<td:p\\s+class=\"A1\"([^>]*?)>","</ce:section><ce:section>");
				
				localbody_str=localbody_str.replaceAll("(?s)\\s*<ce:appendices>\\s*</ce:section>","<ce:appendices>");
				
				
				localbody_str=localbody_str.replaceAll("(?s)\\s*</ce:appendices>\\s*","</ce:section></ce:appendices>");
				
				localbody_str=localbody_str.replaceAll("(?s)\\s*<ce:section>\\s*<td:span\\s+class=\"supple_compactStandard\">(Appendix)(\\s+)"
						+ "([A-Z])\\s+((?:(?!(?:</?td:span>)).)*?)</td:span>\\s*</td:p>","<ce:section view=\"compact-standard\">"
								+ "<ce:label>$1$2$3</ce:label><ce:section-title>$4</ce:section-title>");
				
				localbody_str=localbody_str.replaceAll("(?s)\\s*<ce:section>\\s*<td:span\\s+class=\"supple_extended\">(Appendix)(\\s+)"
						+ "([A-Z])\\s+(\\[\\{\\((Appendix)(\\s+)([A-Z])\\)\\}\\])\\s+((?:(?!(?:</?td:span>)).)*?)</td:span>\\s*</td:p>",
						"<ce:section view=\"extended\"><ce:label>$5$6$7</ce:label><ce:section-title>$8</ce:section-title>");
				
				localbody_str=localbody_str.replaceAll("(?s)\\s*<td:p\\s+class=\"normal\"([^>]*?)>\\s*<td:span\\s+class=\"supple_eComponent\">\\s*"
						+ "<td:span\\s+class=\"xps_Application\">mmc(\\d+)</td:span>\\s*</td:span>\\s*</td:p>",
						"<ce:display><ce:e-component><ce:link locator=\"mmc$2\"/></ce:e-component></ce:display>");
				
				localbody_str=localbody_str.replaceAll("(?s)\\s*([:,])\\s*</ce:para>\\s*<ce:display>((?:(?!(?:</?ce:display>)).)*?)</ce:display>",
						"$1<ce:display>$2</ce:display></ce:para>");
				
				localbody_str="<ce:sections>"+localbody_str+"</ce:sections>";
				
				localbody_str=localbody_str.replaceAll("(?s)\\s*((<ce:acknowledgment>((?:(?!(?:</?ce:acknowledgment>)).)*?)</ce:acknowledgment>)?\\s*"
						+ "(<ce:appendices>((?:(?!(?:</?ce:appendices>)).)*?)</ce:appendices>)?)\\s*</ce:section>\\s*</ce:sections>\\s*$","</ce:section></ce:sections>$1");
				localbody_str="<body>"+localbody_str+"</body>";
				
				
				
//				System.out.println("localbody_str:"+localbody_str);
				
				
				
				
//				Pattern pat = Pattern.compile("(<td:div\\s*id=\"xps_body\">(.*?)</td:div>)",Pattern.DOTALL);	
				
				
//							System.out.println("localbody_str:\'"+localbody_str+"\'");
						
				
//						while(introduction.matches("\\s*<td:p\\s*class=\"txt\"\\s*id=\"([^\"]*?)\">(.*?)</td:p>\\s*(<td:p\\s*class=\"txt\"(.*?))")){
//							introduction=introduction.replaceAll("\\s*<td:p\\s*class=\"txt\"\\s*id=\"([^\"]*?)\">(.*?)</td:p>\\s*", "<ce:section-para>$2</ce:section-para>");
//						}
//					
					
											
//						System.exit(0);
						
					
						
					
					return localbody_str;
//=============================================================
				
				}
			
		
		
	//processing math functions method 
			private static String processmath(String mathstr1) {
				// TODO Auto-generated method stub
				String mathstr=mathstr1;
				mathstr=mathstr.replaceAll("&lt;/", "</mml:");
				mathstr=mathstr.replaceAll("&lt;", "<mml:");
				mathstr=mathstr.replaceAll("&gt;", ">");
				mathstr=mathstr.replaceAll("&quot;", "\"");
				mathstr=mathstr.replaceAll("&amp;", "&");
				
				mathstr="<ce:para><ce:display><ce:formula>"+mathstr+"</ce:formula></ce:display></ce:para>";
				
				//System.out.println(mathstr);
				
				return mathstr;
			
			}
			//processing chemical math functions method 
			private static String processchemmath(String mathstr1) {
				// TODO Auto-generated method stub
				String mathstr=mathstr1;
				if(mathstr.matches("(?s)^\\s*\\(([^\\)]*?)\\)\\s*(.*?)")){
					mathstr=mathstr.replaceAll("(?s)^\\s*\\(([^\\)]*?)\\)\\s*", "<ce:label>($1)</ce:label><ce:chem>");
				}
				else{
					mathstr="<ce:chem>"+mathstr;
				}
				
//				mathstr=mathstr.replaceAll("&lt;", "<mml:");
//				mathstr=mathstr.replaceAll("&gt;", ">");
//				mathstr=mathstr.replaceAll("&quot;", "\"");
//				mathstr=mathstr.replaceAll("&amp;", "&");
				
				mathstr="<ce:para><ce:display><ce:formula>"+mathstr+"</ce:chem></ce:formula></ce:display></ce:para>";
				
				//System.out.println(mathstr);
				
				return mathstr;
			
			}

			
			//processing header info method 
			public static String HeaderInfo(String str1) throws IOException {
				System.out.println("Processing Header-Info...");
				String  header_str="";
//				System.out.println("str:..."+str);
				Pattern p = Pattern.compile("^(.*?)(<td:p\\s*class=\"h1\"|<td:div\\s*id=\"xps_body\">)",Pattern.DOTALL);	//pattern to fetch headerinfo data
		        java.util.regex.Matcher m=p.matcher(str1);
		        if (m.find()) 
		    	{
//		    	   System.out.println("hi"+m.group());
		    		header_str=m.group(1);//contain complete headerinfo data
		    		//str.replace(iteminfo_str,"");
		    		int prepos=0;
		    		int postpos=0;
		    		prepos=m.start();
		    		postpos=m.end();
//		    		System.out.println(postpos); 		
//		    		header_str=str1.substring(0,prepos);  		
		    		str=m.group(2)+str1.substring(postpos,str1.length());
//		    		System.out.println("prepos..."+prepos);
//		    		System.out.println("postpos.."+postpos);
//		    		str=removefromstr("<td:div\\s+([^>]*?)>(.*?)</td:div>",str);    		
//		    		System.out.println("headerstr:..."+header_str);
//		    		System.out.println("str:..."+str);
		    
		    	header_str=ProcessHeaderInfo(header_str);
		
		    	}
		    	else
		    	{
		    		//log.txt file error messing Information writting 
		    		//log 4j writting error msg to fil
		    		String err1="Error[14]: No HeaderInfo found in the input file. This information is mandatory for all files.\n";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
//		    		System.out.println(err1);
		    		fos.write(b);
		    		System.exit(14);
		    	}
				return header_str;
				
			}
			private static String ProcessHeaderInfo(String header_str) throws IOException {   //headerinfo sections processing to fetch headinfo data 
				
				String localheader_str=header_str;	//assigning values to local variable
				System.out.println("\tProcessing Article Title...");
				String articletitle="";
				String Head="";
				
					Pattern patt = Pattern.compile("<td:p\\s*class=\"at\"\\s*id=\"([^\"]*?)\">(.*?)</td:p>",Pattern.DOTALL);	//pattern for fetch article title group 	
					java.util.regex.Matcher m = patt.matcher(localheader_str);
					if(m.find()) 
					{
						articletitle=m.group(2);
						localheader_str=localheader_str.replaceAll(m.group(),"");
//						System.out.println("articletitle:\'"+articletitle+"\'");
//						System.out.println("localheader_str:\'"+localheader_str+"\'");
						articletitle="<ce:title>"+articletitle+"</ce:title>";
//						System.out.println("articletitle:\'"+articletitle+"\'");
						}
					else{	
						//log.txt file error messing Information  writting 
						//log 4j writting error msg to fil
			    		String err1="Error[15]: Article Title Not found in the input file. This is mandatory for all files.";
			    		System.out.println(err1);
			    		byte b[]=err1.getBytes();
			    		fos.write(b);
			    		System.exit(15);
					}
//=============================================================
					System.out.println("\tProcessing Author Info...");
					String authorinfo="";
						Pattern pat = Pattern.compile("<td:p\\s*class=\"au\"\\s*id=\"([^\"]*?)\">(.*?)</td:p>",Pattern.DOTALL);//pattern for fetch authorinfo group
						java.util.regex.Matcher m1 = pat.matcher(localheader_str);
							if(m1.find()) 
							{
								String authorinfoGroup=m1.group();
								authorinfo=m1.group(2);
//								System.out.println("localheaderbefore_str:......"+authorinfo);
								localheader_str=localheader_str.replace(authorinfoGroup,"");
//								System.out.println("localheaderafter_str:......"+localheader_str);
							
								authorinfo=authorinfo.replaceAll("\\s*<td:span\\s*class=\"head_gn\">(.*?)</td:span>\\s*","<ce:given-name>$1</ce:given-name>");//replacing head_gn with <given-name>
//								System.out.println("authorinfo:\'"+authorinfo+"\'");
								authorinfo=authorinfo.replaceAll("\\s*<td:span\\s*class=\"head_sn\">(.*?)</td:span>\\s*","<ce:surname>$1</ce:surname>");	//replacing head_sn with <surname>
								while(authorinfo.matches("(?s)(.*?)(<ce:sup>\\s*([a-z])\\s*,\\s*)(.*?)")){
									authorinfo=authorinfo.replaceAll("(?s)\\s*<ce:sup>\\s*([a-z])\\s*,","<ce:sup>$1</ce:sup><ce:sup>"); //replacing sup with <crossref>
								}
								authorinfo=authorinfo.replaceAll("\\s*<ce:sup>([a-z])</ce:sup>\\s*","<ce:cross-ref refid=\"aff\"><ce:sup>$1</ce:sup></ce:cross-ref>");
								authorinfo=authorinfo.replaceAll("\\s*<ce:sup>\\*</ce:sup>\\s*","<ce:cross-ref refid=\"cor\"><ce:sup>&#x204e;</ce:sup></ce:cross-ref>"); //replacing sup with <crossref>
								authorinfo=authorinfo.replaceAll("\\s*<td:a href=\"([^\"]*?)\">(.*?)</td:a>\\s*","<ce:e-address type=\"email\">$1</ce:e-address>"); //replacing href with <eaddress>
					
								
								authorinfo=authorinfo.replaceAll("\\s*<td:span\\s*class=\"head_au\">\\s*(.*?)\\s*</td:span>\\s*(&#65279;)\\s*","<ce:author>$1</ce:author>");
								
								//log.txt file error messing Information  writting 
								if(authorinfo.matches("(?s)(.*?)<[/]?td:(.*?)")){
									String err1="Error[17]: Author information Not processed properly as there exists some unprocessed information - \'<td: or </td:\'. Please check!\n"+authorinfo;
						    		System.out.println(err1);
						    		byte b[]=err1.getBytes();
						    		fos.write(b);
						    		System.exit(17);
								
								}
								
//								System.out.println("authorinfo:\'"+authorinfo+"\'");
//								System.out.println("localheader_str:......"+localheader_str+"");
								authorinfo="<ce:author-group>"+authorinfo+"</ce:author-group>";
//								System.out.println("authorinfo:\'"+authorinfo+"\'");
//								
								}
							else{		
								//log.txt file error messing Information  writting 
								//log 4j writting error msg to fil
					    		String err1="Error[16]: Author information Not found in the input file. This is mandatory for all files.";
					    		System.out.println(err1);
					    		byte b[]=err1.getBytes();
					    		fos.write(b);
					    		System.exit(16);
							}

//=============================================================				
							System.out.println("\tProcessing Affiliation...");
							String affiliation="";
							String aff="";
							String afflabel="";
							String saff="";
														
							pat = Pattern.compile("\\s*<td:p\\s*class=\"aff\"([^>]*?)>(.*?)</td:p>\\s*(<td:p\\s*class=\"saff\"([^>]*?)>(.*?)</td:p>)?\\s*",Pattern.DOTALL);//pattern for fetch affiliation infoGroup
								m1 = pat.matcher(localheader_str);
									while(m1.find()) 
									{
										String affinfoGroup=m1.group();
										aff=m1.group(2);
										saff=m1.group(5);
										afflabel=aff.replaceAll("(?s)^\\s*<ce:sup>\\s*((?:(?!(?:</?ce:sup>)).)*?)\\s*</ce:sup>(.*?)$", "<ce:label>$1</ce:label>");
										aff=aff.replaceAll("(?s)^\\s*<ce:sup>\\s*((?:(?!(?:</?ce:sup>)).)*?)\\s*</ce:sup>(.*?)$", "$2");
										localheader_str=localheader_str.replaceAll("(?s)\\Q"+affinfoGroup+"\\E","");
//										System.out.println("localheader_str:\'"+localheader_str+"\'");
										saff=saff.replaceAll("(?s)\\s*<td:span\\s*class=\"xps_organization\">(.*?)</td:span>(,)?\\s*","<sa:organization>$1</sa:organization>");
										saff=saff.replaceAll("(?s)\\s*<td:span\\s*class=\"xps_address\">(.*?)</td:span>(,)?\\s*","<sa:address-line>$1</sa:address-line>");
										saff=saff.replaceAll("(?s)\\s*<td:span\\s*class=\"xps_city\">(.*?)</td:span>(,)?\\s*","<sa:city>$1</sa:city>");
										saff=saff.replaceAll("(?s)\\s*<td:span\\s*class=\"xps_pincode\">(.*?)</td:span>(,)?\\s*","<sa:postal-code>$1</sa:postal-code>");
										saff=saff.replaceAll("(?s)\\s*<td:span\\s*class=\"xps_country\">(.*?)</td:span>(,)?\\s*","<sa:country>$1</sa:country>");
										
//										System.out.println("aff:\'"+aff+"\'");
//										System.out.println("saff:\'"+saff+"\'");
										
//										System.out.println("localheader_str:\'"+localheader_str+"\'");
										aff=afflabel+"<ce:textfn>"+aff+"</ce:textfn>";
										if(!saff.equals(""))
										{
											saff="<sa:affiliation>"+saff+"</sa:affiliation>";
										}
										affiliation+="<ce:affiliation>"+aff+saff+"</ce:affiliation>";
//										System.out.println("aff:\'"+affiliation+"\'");
									}
									authorinfo=authorinfo.replace("</ce:author-group>", affiliation+"</ce:author-group>");
//									System.out.println("aff:\'"+affiliation+"\'");
									
									//log.txt file error messing Information  writting 
									if(affiliation.matches("(?s)(.*?)<[/]?td:(.*?)")){
										String err1="Error[18]: Affiliation information Not processed properly as there exists some unprocessed information - \'<td: or </td:\'. Please check!\n"+affiliation;
							    		System.out.println(err1);
							    		byte b[]=err1.getBytes();
							    		fos.write(b);
							    		System.exit(18);
									
									}
									
				
	//=============================================================
									System.out.println("\tProcessing Corresponding Address...");
									String auttel="";			
									pat = Pattern.compile("\\s*<td:div\\s*id=\"xps_corr\">\\s*<td:p\\s*class=\"cor\"\\s*id=\"([^\"]*?)\">(.*?)</td:p>\\s*</td:div>\\s*",Pattern.DOTALL);	//pattern to fech  correspondance data 
									m1 = pat.matcher(localheader_str);
									if(m1.find()) 
										{
											String auttelinfoGroup=m1.group();
											auttel=m1.group(2);
//											System.out.println(".......localheader_str:\'"+localheader_str+"\'");
//											System.out.println(".......auttelr:\'"+auttel+"\'");
											localheader_str=localheader_str.replace(auttelinfoGroup,"");
											auttel=auttel.replaceAll("(?s)^\\s*<ce:sup>\\*</ce:sup>\\s*","<ce:label>&#x204e;</ce:label><ce:text>");
											auttel=auttel+"</ce:text>";
											if(!auttel.equals(""))	
												{
													auttel="<ce:correspondence>"+auttel+"</ce:correspondence>";
												}
//												System.out.println("auttel:\'"+auttel+"\'");
										}
									//log.txt file error messing Information  writting 
										  if(auttel.matches("(?s)(.*?)<[/]?td:(.*?)"))
										  {
											 String err1="Error[19]: Corresponding information Not processed properly as there exists some unprocessed information - \'<td: or </td:\'. Please check!\n"+auttel;
									    	 System.out.println(err1);
									    	 byte b[]=err1.getBytes();
									    	 fos.write(b);
									    	 System.exit(19);
									       }
										authorinfo=authorinfo.replace("</ce:author-group>", auttel+"</ce:author-group>");
											
				//=============================================================		
											//reserved for author-footnote
				//=============================================================	
								System.out.println("\tProcessing Article History...");
								String history="";
								String history_temp="";
								
								
								
	//							System.out.println("localheader_str:\'"+localheader_str+"\'");
																
								 patt = Pattern.compile("\\s*<td:p\\s*class=\"history\"([^>]*?)>(.*?)</td:p>",Pattern.DOTALL); //pattern for fetch history data 
							
									 m1 = patt.matcher(localheader_str);
										if(m1.find()) 
										{
											String historyinfoGroup=m1.group();
											history=m1.group(2);
											
											localheader_str=localheader_str.replace(historyinfoGroup,"");
										
											//representing history-date in day month year formate
											history=history.replaceAll("\\s*(Received)\\s*[:]\\s*(\\d+)\\s*[-]\\s*(\\d+)\\s*[-]\\s*(\\d+)\\s*","<ce:date-received day=\"$2\" month=\"$3\" year=\"$4\"/>");
											history=history.replaceAll("\\s*(Revised)\\s*[:]\\s*(\\d+)\\s*[-]\\s*(\\d+)\\s*[-]\\s*(\\d+)\\s*","<ce:date-revised day=\"$2\" month=\"$3\" year=\"$4\"/>");
											history=history.replaceAll("\\s*(Accepted)\\s*[:]\\s*(\\d+)\\s*[-]\\s*(\\d+)\\s*[-]\\s*(\\d+)\\s*","<ce:date-accepted day=\"$2\" month=\"$3\" year=\"$4\"/>");
	
											history_temp=history;
											history_temp=history_temp.replaceAll("<ce:date-([^>]*?)>", "").trim();
											//log.txt file error messing Information  writting 
											if(!history_temp.equals(""))
											{
												 String err1="Error[20]: History information Not processed properly as there exists some unprocessed information. Please check!\n"+history;
										    	 System.out.println(err1);
										    	 byte b[]=err1.getBytes();
										    	 fos.write(b);
										    	 System.exit(20);
											}
											
											localheader_str=localheader_str.trim();
//											System.out.println("localheader_str:..."+localheader_str);
//											System.out.println("history:\'"+history+"\'");
											
										}
//										System.exit(0);
										
//=============================================================	
								 System.out.println("\tProcessing Abstract and keywords ...");	
								 System.out.println("\t\tProcessing Abstract ...");
								 String abskwd= "";
								 String abstinfo= "";
								 String abstitle= "";
								 String abstpara= "";
								 String keywords= "";
																			
								 patt = Pattern.compile("\\s*<td:div\\s*id=\"xps_abstract\">(.*?)</td:div>\\s*",Pattern.DOTALL);  //pattern for fetching abstract and keyword data 
								 m1 = patt.matcher(localheader_str);
//								 System.out.println("hiii1");
									if(m1.find()) 
									  {
//										System.out.println("hiii2");
										abskwd=m1.group(1);
										keywords=m1.group(1);
										abstinfo=m1.group(1);
										localheader_str=localheader_str.replace(m1.group(),"").trim();
//										System.out.println("abstract:......\'"+abskwd+"\'");
//										System.exit(0);
										abstinfo=abstinfo.replaceAll("(<td:p\\s*class=\"kwd\"([^>]*?)>(.*?)</td:p>)", "").trim();
										keywords=keywords.replaceAll("(?s)^(.*?)((\\s*(<td:p\\s*class=\"kwd\"([^>]*?)>(.*?)</td:p>)+\\s*)+)(.*?)$", "$2").trim();
																				
										abskwd=abskwd.replace(abstinfo, "");
										abskwd=abskwd.replace(keywords, "");
										abskwd=abskwd.trim();
										
										while(abstinfo.matches("(?s)\\s*(.*?)(<td:p\\s*class=\"abs\"([^>]*?)>(.*?)</td:p>)(.*?)(<td:p\\s*class=\"abs\"([^>]*?)>(.*?)$|$)")){
//											System.out.println("hi");
											abstinfo=abstinfo.replaceAll("(?s)\\s*(<td:p\\s*class=\"abs\"([^>]*?)>(.*?)</td:p>)(.*?)(<td:p\\s*class=\"abs\"([^>]*?)>|$)", 
													"</ce:abstract><ce:abstract><ce:section-title>$3</ce:section-title><ce:abstract-sec>$4</ce:abstract-sec>$5");
											
										}
										
										
										abstinfo=abstinfo.replaceAll("(?s)\\s*(((\\s*<td:p\\s*class=\"absp\"([^>]*?)>(.*?)</td:p>\\s*)+)+)\\s*", "$1");
										abstinfo=abstinfo.replaceAll("(?s)\\s*<td:p\\s*class=\"abs\"([^>]*?)>(.*?)</td:p>\\s*", "<ce:section-title>$2</ce:section-title>");
										abstinfo=abstinfo.replaceAll("(?s)\\s*<td:span\\s*class=\"xps_Image\">(.*?)</td:span>\\s*", "<ce:display><ce:figure><ce:link locator=\"$1\"/></ce:figure></ce:display>");////////<span class="xps_Image">fx1</span>
										//<td:li>--for list        
										
										while(abstinfo.matches("(?s)(.*?)(<td:ul>((?:(?!(?:</?td:ul>)).)*?)</td:ul>)(.*?)")){
											abstinfo=abstinfo.replaceAll("(?s)\\s*<td:ul>((?:(?!(?:</?td:ul>)).)*?)</td:ul>\\s*", "<ce:list>$1</ce:list>");
										}
										
										while(abstinfo.matches("(?s)(.*?)(<td:li>((?:(?!(?:</?td:li>)).)*?)</td:li>)(.*?)")){
											abstinfo=abstinfo.replaceAll("(?s)\\s*<td:li>((?:(?!(?:</?td:li>)).)*?)</td:li>\\s*", "<ce:list-item><ce:label>&bull;</ce:label><ce:para>$1</ce:para></ce:list-item>");
										}
										
										while(abstinfo.matches("(?s)(.*?)\\s*<td:p\\s*class=\"absp\"([^>]*?)>(.*?)</td:p>\\s*(<ce:simple-para>|<td:p\\s*class=\"absp\"|</ce:abstract-sec>)(.*?)")){
											abstinfo=abstinfo.replaceAll("(?s)\\s*<td:p\\s*class=\"absp\"([^>]*?)>(.*?)</td:p>\\s*(<ce:simple-para>|<td:p\\s*class=\"absp\"|</ce:abstract-sec>)", "<ce:simple-para>$2</ce:simple-para>$3");
										}
										abstinfo=abstinfo.replaceAll("(?s)\\s*<ce:abstract-sec>\\s*<ce:list>", "<ce:abstract-sec><ce:simple-para><ce:list>");
										abstinfo=abstinfo.replaceAll("(?s)\\s*</ce:list>\\s*</ce:abstract-sec>", "</ce:list></ce:simple-para></ce:abstract-sec>");
										abstinfo=abstinfo.replaceAll("(?s)^\\s*</ce:abstract>", "");
										abstinfo=abstinfo+"</ce:abstract>";
										
										
										System.out.println("\t\tProcessing Keywords ...");
										keywords=keywords.replaceAll("(?si)<td:p\\s*class=\"kwd\"\\s*role=\"([^\"]*?)\"([^>]*?)>\\s*(Keywords|Abbreviations)\\s*[:]?"
												+ "\\s*(&#8203;)?\\s*<td:span\\s*class=\"keyword\">", "<ce:keywords class=\"$1\"><ce:section-title>$3</ce:section-title><td:span class=\"keyword\">");
										
										keywords=keywords.replaceAll("(?si)\\s*<td:span\\s*class=\"keyword\">\\s*<td:span\\s*class=\"subkeyword\">"
												+ "((?:(?!(?:</?td:span)).)*?)</td:span>((?:(?!(?:</?td:span)).)*?)</td:span>\\s*(,|;)?\\s*",
												"<ce:keyword><ce:text>$1</ce:text><ce:keyword><ce:text>$2</ce:text></ce:keyword></ce:keyword>");
										keywords=keywords.replaceAll("(?si)\\s*<td:span\\s*class=\"keyword\">", "<ce:keyword><ce:text>");
										keywords=keywords.replaceAll("(?s)\\s*</td:span>\\s*(,|;)?\\s*", "</ce:text></ce:keyword>");
//										keywords=keywords.replaceAll("(?s)\\s*</td:span>\\s*(,|;)?\\s*", "</ce:text></ce:keyword>");
										keywords=keywords.replaceAll("(?s)\\s*</td:p>\\s*", "</ce:keywords>");
										

//										System.out.println("abstract:......\'"+abstinfo+"\'");
//										System.out.println("keywords:......\'"+keywords+"\'");
//										System.exit(0);
										
									  }	
									//log.txt file error messing Information  writting 
//									System.out.println("abskwd:......\'"+abskwd+"\'");
//									System.exit(0);
									if(!abskwd.equals(""))
									{
										String err1="Error[21]: Abstract and keyword information Not processed properly as there exists some unprocessed information. Please check!\n"+abskwd;
								    	 System.out.println(err1);
								    	 byte b[]=err1.getBytes();
								    	 fos.write(b);
								    	 System.exit(21);
									}
									
									localheader_str=localheader_str.replaceAll("<td:hr\\s*/>", "");
//									System.out.println("localheader_str:......\'"+localheader_str+"\'");
									//log.txt file error messing Information  writting 
									if(!localheader_str.equals(""))
									{
										String err1="Error[22]: Header information Not processed properly as there exists some unprocessed information. Please check!\n"+localheader_str;
										 System.out.println(err1);
										 byte b[]=err1.getBytes();
										 fos.write(b);
										 System.exit(22);
									}
									localheader_str="<head>"+articletitle+authorinfo+history+abstinfo+keywords+"</head>";
//											System.out.println("Head:......\'"+Head+"\'");
		
				return localheader_str;
			}

			public static String ItemInfo(String str1) throws IOException, SAXException 
			{
				String  iteminfo_str="";
				System.out.println("Processing Item-Info...");
				
//		    	System.out.println("Item-info...str.."+str);
		    	
		    	Pattern p = Pattern.compile("<td:div\\s+id=\"xps_meta\"\\s*>(.*?)</td:div>"); //pattern for fetching iteminfo data 
		    	
//		    	java.util.regex.Matcher m = p.matcher(str);    	
//		        Pattern p = Pattern.compile("<td:br />");
		    	
		        java.util.regex.Matcher m=p.matcher(str1);
		        
	
		    	if (m.find()) 
		    	{
		    	   
		    		iteminfo_str=m.group();	//contain complete iteminfo data
		    		//str.replace(iteminfo_str,"");
		    		int prepos=0;
		    		int postpos=0;
		    		prepos=m.start();
		    		postpos=m.end();
//		    		System.out.println(postpos); 		
		    		
		    		str=str1.substring(0,prepos)+str1.substring(postpos,str1.length());
//		    		System.out.println("prepos..."+prepos);
//		    		System.out.println("postpos.."+postpos);
//		    		
//		    		str=removefromstr("<td:div\\s+([^>]*?)>(.*?)</td:div>",str);
		    		
//		    		System.out.println("iteminfo_str:..."+iteminfo_str);
//		    		System.out.println("str:..."+str1);
		    		
		    		iteminfo_str=ProcessItemInfo(iteminfo_str);
//		    		
		    		
		    	}
		    	else
		    	{
		    		//log.txt file error messing Information  writting 
		    		//log 4j writting error msg to fil
		    		String err1="Error[3]: No ItemInfo found in the input file. This information is mandatory for all files.\n";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
//		    		System.out.println(err1);
		    		fos.write(b);
		    		System.exit(3);
		    	}
		    	return iteminfo_str;
		    }
			
			
			public static String ProcessItemInfo(String iteminfo_str) throws IOException, SAXException {
				String localiteminfo_str=iteminfo_str;
				localiteminfo_str=localiteminfo_str.replaceAll("^<td:div\\s+id=\"xps_meta\"\\s*>\\s*\\**", "");
				localiteminfo_str=localiteminfo_str.replaceAll("\\s*\\**</td:div>$", "");
				
//				System.out.println("localiteminfo_str=====:"+localiteminfo_str);
				
							
//===============================================Article language code capturing
				System.out.println("\tProcessing Article Language...");
//				String langcode="";
				if(localiteminfo_str.matches("(?s)(.*?)<td:br\\s*/>\\s*Lang:\\s*([a-z]+)\\s*<td:br\\s*/>(.*?)"))
				{
					Pattern patt = Pattern.compile("<td:br\\s*/>\\s*Lang:\\s*([a-z]+)\\s*<td:br\\s*/>"); //pattern for lang code 
					java.util.regex.Matcher m = patt.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						langcode=m.group(1);
						localiteminfo_str=localiteminfo_str.replaceAll(m.group(),"<td:br/>");
						  }
					
					if(LangCode.matches("(?s)(.*)[|]"+langcode+"[|](.*)")){  // checking with global lang code i.e elsiver family langcodes
//						System.out.println("langcode:\'"+langcode+"\'");
//						System.out.println("langcode:correct");
					}
					else 
					{
						//log.txt file error messing Information  writting 
						//log 4j writting error msg to fil
			    		String err1="Error[5]: The given Article Language code \'"+langcode+"\' is invalid!\nThe valid Article Language codes are:"+LangCode;
			    		System.out.println(err1);
			    		byte b[]=err1.getBytes();
			    		fos.write(b);
			    		System.exit(5);
					}
//					System.out.println("loc:.."+localiteminfo_str);
				}else{		
					//log 4j writting error msg to fil
		    		String err1="Error[4]: No Article Language code found in the input file. This is mandatory for all files.";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(4);
				}
//=============================================================
				System.out.println("\tProcessing Client Information...");
				String client="";
				if(localiteminfo_str.matches("(?s)(.*?)<td:br\\s*/>\\s*Client:\\s*([A-Za-z]+)\\s*<td:br\\s*/>(.*?)"))
									
				{
//					System.out.println("local:.."+localiteminfo_str);
					Pattern pattern = Pattern.compile("<td:br\\s*/>\\s*Client:\\s*([A-Za-z]+)\\s*<td:br\\s*/>"); //pattern for client info
					java.util.regex.Matcher m = pattern.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						client=m.group(1);
//						System.out.println("ClientInfo:.."+client);
						localiteminfo_str=localiteminfo_str.replaceAll(m.group(),"<td:br/>");
					  }
//					System.out.println("client:..."+client);
					if(client.matches("[E][L][J]")){  //matching with corresponding client
//						System.out.println("ClientDetails.."+client);
					}
					else 
					{
						//log.txt file error messing Information  writting 
						//log 4j writting error msg to fil
			    		String err1="Error[6]: Invalid Client Information "+client+" is given!\nThe valid client name is ELJ";
			    		System.out.println(err1);
			    		byte b[]=err1.getBytes();
			    		fos.write(b);
			    		System.exit(6);
					}
//					System.out.println("local:.."+localiteminfo_str);
									
				}
				else 
				{
					//log.txt file error messing Information  writting 
					//log 4j writting error msg to fil
		    		String err1="Error[8]: Client Information is not given!";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(8);
				}
					
//=============================================================
				System.out.println("\tProcessing Jid and Aid ...");
				String jid="";
				String aid="";
				if(localiteminfo_str.matches("(?s)(.*?)<td:br\\s*/>\\s*([A-Za-z]+)\\s+(\\d+)\\s*<td:br\\s*/>(.*?)"))
									
				{
//					System.out.println("local:.."+localiteminfo_str);
					Pattern pattern = Pattern.compile("<td:br\\s*/>\\s*([A-Za-z]+)\\s+(\\d+)\\s*<td:br\\s*/>");//pattern for jid and aid
					java.util.regex.Matcher m = pattern.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						jid=m.group(1);
						aid=m.group(2);
//						System.out.println("Jid,aid:.."+jid+","+aid);
						localiteminfo_str=localiteminfo_str.replaceAll(m.group(),"<td:br/>");
					  }
//					System.out.println("client:..."+client);
	
//					System.out.println("local:.."+localiteminfo_str);
									
				}
				else
				{
					//log.txt file error messing Information  writting 
					//log 4j writting error msg to fil
		    		String err1="\t\tError[7]: Either Journel-id or Article-id not found!\n\t\tCorrect format is AAA 123";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(7);
				}
				
//=============================================================		
				System.out.println("\tProcessing Pii...");
				
				String pii="";
				
				if(localiteminfo_str.matches("(?s)(.*?)<td:br\\s*/>\\s*(([S])(\\d{4})[-](\\d{4})[\\(](\\d{2})[\\)](\\d{5})[-]([A-Z0-9]))<td:br\\s*/>(.*?)"))
					
				{
//					System.out.println("pii:.."+localiteminfo_str);
					Pattern pattern = Pattern.compile("<td:br\\s*/>\\s*(([S])(\\d{4})[-](\\d{4})[\\(](\\d{2})[\\)]\\s*(\\d{5})[-](\\d))<td:br\\s*/>");//pattern for pii
					java.util.regex.Matcher m = pattern.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						pii=m.group(1);
						Globalpii=pii; //declare a global varible to remove( or ) or , or -
//						System.out.println("localiteminfo_str1:..."+localiteminfo_str);
//						System.out.println("Group:..."+m.group());
						localiteminfo_str=localiteminfo_str.replace(m.group(),"<td:br/>");
//						System.out.println("localiteminfo_str2:..."+localiteminfo_str);
					  }

//					System.out.println("piino:.."+pii);
									
				}
				else
				{
					//log.txt file error messing Information  writting 
					//log 4j writting error msg to fil
		    		String err1="\t\tError[9]: PII Information is not found!";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(9);
				}
				
//=============================================================		
				System.out.println("\tProcessing Doi and Articlenumber...");
				
				String doi="";
				String articlenumber="";
				
				if(localiteminfo_str.matches("(?s)(.*?)<td:br\\s*/>\\s*((10.1016/)(.*?))<td:br\\s*/>(.*?)"))
									
				{
					
					Pattern pattern = Pattern.compile("<td:br\\s*/>\\s*((10.1016/)(.*?))<td:br\\s*/>"); //pattern for Doi 
					java.util.regex.Matcher m = pattern.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						doi=m.group(1);
						articlenumber=doi.substring(doi.lastIndexOf(".")+1);   //fetching Articlenumber form doi  
						localiteminfo_str=localiteminfo_str.replaceAll(m.group(),"<td:br/>");
					  }

//					System.out.println("doino:.."+doi);
//					System.out.println("Articleno:.."+articlenumber);
									
				}
				else
				{
					//log.txt file error messing Information  writting 
					//log 4j writting error msg to fil
		    		String err1="\t\tError[10]: Doi and Articlenumber Information is not found!";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(10);
				}
				
//				System.out.println("localiteminfo_str:..."+localiteminfo_str);
//=============================================================		
				System.out.println("\tProcessing Copyrightstatus...");

				String copyrightstatus="";
				String copyrighttype ="";
				String copyrightyear="";
				String copyrightorg="";

				if(localiteminfo_str.matches("(?s)(.*?)<td:br\\s*/>\\s*(\\d{3})\\s*<td:br\\s*/>(.*?)"))
									
				{
					Pattern pattern = Pattern.compile("<td:br\\s*/>\\s*(\\d{3})\\s*<td:br\\s*/>");   //pattern for copyrightstatus
					java.util.regex.Matcher m = pattern.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						copyrightstatus=m.group(1);
//						System.out.println("copyrightstatus is:... "+m.group(1));
				
						//getting current year 
						
						Calendar now = Calendar.getInstance();
						copyrightyear="" + now.get(Calendar.YEAR);
						//System.out.println("Current Year is : " + now.get(Calendar.YEAR));
														 
						String copyrightstatuspatternmatch="[@|]"+copyrightstatus+"[|](.*?)[|](.*?)[|@]";
						Pattern pattern1 = Pattern.compile(copyrightstatuspatternmatch);
//						Pattern pattern1 = Pattern.compile("@|"+copyrightstatus+"|([a-zA-Z]*?)|@");
						
						java.util.regex.Matcher m1 = pattern1.matcher(copyrightInfo);     				    						      
						
						if(m1.find())
						{
//							System.out.println(m1.group());
							copyrighttype = m1.group(1).trim();	//copyright type info
							copyrightorg =m1.group(2).trim();	//copyright org info
						}
						else
						{
							//log.txt file error messing Information  writting 
							//log 4j writting error msg to fil
				    		String err1="\t\tError[12]:Invalid Copyrightstatus \'"+copyrightstatus+"\' is given! The valid copyrightstatus are: 000,001,002,003,004,005,006,007,008";
				    		System.out.println(err1);
				    		byte b[]=err1.getBytes();
				    		fos.write(b);
				    		System.exit(12);	
						}
						     
						          
//						    System.out.println("\t\tcopyrighttype is: "+copyrighttype+"\tcopyrightyear: " + copyrightyear+"\tcopyrightorg:"+copyrightorg);
						
						localiteminfo_str=localiteminfo_str.replace(m.group(),"<td:br/>");
					  }
				
				}
				else 
				{
					//log.txt file error messing Information  writting 
					//log 4j writting error msg to fil
		    		String err1="\t\tError[11]:Copyrightstatus Information is not found!";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(11);
				}
				
//				System.out.println("localiteminfo_str:..."+localiteminfo_str);

				localiteminfo_str=localiteminfo_str.replaceAll("\\s*<td:br\\s*/>\\s*", "");
				
				localiteminfo_str=localiteminfo_str.trim();
				
//				System.out.println("localiteminfo_str:..."+localiteminfo_str);
//				direct hardcode tags for writting iteminfo to xml file 
				if(localiteminfo_str.equals(""))
				{
					localiteminfo_str="<item-info><jid>"+jid+"</jid>";
					
					if(!aid.equals("")){
						localiteminfo_str+="<aid>"+aid+"</aid>";
					}
					if(!articlenumber.equals("")){
						localiteminfo_str+="<ce:article-number>"+articlenumber+"</ce:article-number>";}
					
						localiteminfo_str+="<ce:pii>"+pii+"</ce:pii>" ;
					if(!doi.equals("")){
						localiteminfo_str+="<ce:doi>"+doi+"</ce:doi>" ;}
//					
						localiteminfo_str+="<ce:copyright type=\""+copyrighttype+"\" year=\""+copyrightyear+"\">"+copyrightorg+"</ce:copyright>" ;
						localiteminfo_str+="</item-info>";
					
					
//					System.out.println("localiteminfo_strxml:..."+localiteminfo_str);
					
					
				}
				else 
				{
					//log.txt file error messing Information  writting 
						//log 4j writting error msg to fil
			    		String err1="\t\tError[13]:ItemInfo not processed completly!\n\t\t\""+localiteminfo_str+"\" is left unprocessed!\n\t\tPlease check!";
			    		System.out.println(err1);
			    		byte b[]=err1.getBytes();
			    		fos.write(b);
			    		System.exit(13);

				}
				//System.out.println("str2===="+str);
				return localiteminfo_str;
			}
			

}
