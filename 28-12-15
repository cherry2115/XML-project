package New;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.regex.*;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.sax.SAXTransformerFactory;
import javax.xml.transform.sax.TransformerHandler;
import javax.xml.transform.stream.StreamResult;

import org.xml.sax.SAXException;
import org.xml.sax.helpers.AttributesImpl;

import com.sun.org.apache.xerces.internal.impl.xs.identity.Selector.Matcher;

public class Code
{
			BufferedReader in;
		    static StreamResult out;
		    static TransformerHandler th;
		    static AttributesImpl atts;
		    BufferedWriter log=null;
        	static File logFile=new File("D:\\Log.txt");
        	static FileOutputStream fos=null;
        	
        	static String LangCode="|aa|ab|af|am|ar|as|ay|az|ba|be|bg|bh|bi|bn|bo|br|ca|co|cs|cy|da|de|dz|el|en|eo|es|et|eu|"
        			+ "fa|fi|fj|fo|fr|fy|ga|gd|gl|gn|gu|ha|he|hi|hr|hu|hy|ia|id|ie|ik|is|it|ja|jw|ka|kk|kl|km|kn|ko|"
        			+ "ks|ku|ky|la|ln|lo|lt|lv|mg|mi|mk|ml|mn|mo|mr|ms|mt|my|na|ne|nl|no|oc|om|or|pa|pl|ps|pt|qu|rm|"
        			+ "rn|ro|ru|rw|sa|sd|sg|si|sk|sl|sm|sn|so|sq|sr|ss|st|su|sv|sw|ta|te|tg|th|ti|tk|tl|tn|to|tr|ts|"
        			+ "tt|tw|uk|ur|uz|vi|vo|wo|xh|yi|yo|zh|zu|";
        	static String copyrightInfo="@|000|free-of-copyright| |@|001|unknown| |@|002|full-transfer|Elsevier Company|"
        			+ "@|003|us-gov| |@|004|crown| |@|005|limited-transfer|Elsevier Company|@|006|other|Author|"
        			+ "@|007|no-transfer| |@|008|other| |@";
        	static String str = "";
        	
        	// Here's our entry point ... 
        	
     	 public static void main(String args[]) throws IOException
		    {
     		 	fos=new FileOutputStream(logFile);
     		 
		    	Initlisation initial = new Initlisation();
				Initlisation.checkjavaVersion(1.7f);

				
				if(!logFile.exists())
	        	{
	        		logFile.createNewFile();
	        	}
		    	
		        new Code().doit();
		    }

		    public  void doit() 
		    	{
		    	   try 
		    		{
		        	
		            in = new BufferedReader(new FileReader("D:\\abc.txt"));
		            out = new StreamResult(new FileWriter("D:\\output.xml"));
		           
		            //String str = "";
		            String s="";
			    	String  iteminfo_str="";
			    	String  header_str="";
		            while ((s = in.readLine()) != null)
		            { 
		            	str += s+"\n";
					}
//		            System.out.println("str..."+str);
		            
		            str=str.replaceAll("<([^/!?])", "<td:$1");
		       	
		       	 str=str.replaceAll("</", "</td:");
		       	 
//		       	System.out.println("My Output is==== : " +str); 
		       	  	 
		       	iteminfo_str= ItemInfo(str);
		       	header_str=HeaderInfo(str);
		       	 System.exit(0);
		       
		            in.close();
		            closeXML();
		        }
		        catch (Exception e) 
		        {
		            e.printStackTrace();
		        }
		    }

			public static String HeaderInfo(String str1) throws IOException {
				// TODO Auto-generated method stub
				System.out.println("Processing Header-Info...");
				String  header_str="";
//				System.out.println("str:..."+str);
				Pattern p = Pattern.compile("^(.*?)(<td:p\\s*class=\"h1\"|<td:div\\s*id=\"xps_body\">)",Pattern.DOTALL);
//				
		        java.util.regex.Matcher m=p.matcher(str1);
//		       
		        if (m.find()) 
		    	{
		    	   //System.out.println("hi"+m.group());
		    		header_str=m.group(1);
		    		//str.replace(iteminfo_str,"");
		    		int prepos=0;
		    		int postpos=0;
		    		prepos=m.start();
		    		postpos=m.end();
//		    		System.out.println(postpos); 		
		    		
		    		//header_str=str1.substring(0,prepos);
		    		
		    		str=m.group(2)+str1.substring(postpos+1,str1.length());
//		    		System.out.println("prepos..."+prepos);
//		    		System.out.println("postpos.."+postpos);
		    		
//		    		str=removefromstr("<td:div\\s+([^>]*?)>(.*?)</td:div>",str);
		    		
		    		
//		    		System.out.println("headerstr:..."+header_str);
		    		//System.out.println("str:..."+str);
		    	
//		    		System.exit(0);
		    		header_str=ProcessHeaderInfo(header_str);
//		    		
		    		
		    	}
		    	else
		    	{
		    		//log 4j writting error msg to fil
		    		String err1="Error[14]: No HeaderInfo found in the input file. This information is mandatory for all files.\n";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
//		    		System.out.println(err1);
		    		fos.write(b);
		    		System.exit(14);
		    	}
				return header_str;
				
			}
			private static String ProcessHeaderInfo(String header_str) throws IOException {
				// TODO Auto-generated method stub
				String localheader_str=header_str;
				System.out.println("\tProcessing Article Title...");
				String articletitle="";
					Pattern patt = Pattern.compile("<td:p\\s*class=\"at\"\\s*id=\"([^\"]*?)\">(.*?)</td:p>",Pattern.DOTALL);
					java.util.regex.Matcher m = patt.matcher(localheader_str);
					if(m.find()) 
					{
						articletitle=m.group(2);
						localheader_str=localheader_str.replaceAll(m.group(),"");
//						System.out.println("articletitle:\'"+articletitle+"\'");
//						System.out.println("localheader_str:\'"+localheader_str+"\'");
						articletitle="<ce:title>"+articletitle+"</ce:title>";
//						System.out.println("articletitle:\'"+articletitle+"\'");
						}
					else{		
						//log 4j writting error msg to fil
			    		String err1="Error[15]: Article Title Not found in the input file. This is mandatory for all files.";
			    		System.out.println(err1);
			    		byte b[]=err1.getBytes();
			    		fos.write(b);
			    		System.exit(15);
					}
//=============================================================
					System.out.println("\tProcessing Author Info...");
					String authorinfo="";
						Pattern pat = Pattern.compile("<td:p\\s*class=\"au\"\\s*id=\"([^\"]*?)\">(.*?)</td:p>",Pattern.DOTALL);
						java.util.regex.Matcher m1 = pat.matcher(localheader_str);
							if(m1.find()) 
							{
								String authorinfoGroup=m1.group();
								authorinfo=m1.group(2);
//								System.out.println("localheaderbefore_str:......"+localheader_str);
								localheader_str=localheader_str.replace(authorinfoGroup,"");
//								System.out.println("localheaderafter_str:......"+localheader_str);
//								System.exit(0);
								authorinfo=authorinfo.replaceAll("\\s*<td:span\\s*class=\"head_gn\">(.*?)</td:span>\\s*","<ce:given-name>$1</ce:given-name>");
								authorinfo=authorinfo.replaceAll("\\s*<td:span\\s*class=\"head_sn\">(.*?)</td:span>\\s*","<ce:surname>$1</ce:surname>");
								authorinfo=authorinfo.replaceAll("\\s*<td:sup>\\*</td:sup>\\s*","<ce:cross-ref refid=\"cor\"><ce:sup>?</ce:sup></ce:cross-ref>");
								authorinfo=authorinfo.replaceAll("\\s*<td:a href=\"([^\"]*?)\">(.*?)</td:a>\\s*","<ce:e-address type=\"email\">$1</ce:e-address>");
					
								
								authorinfo=authorinfo.replaceAll("\\s*<td:span\\s*class=\"head_au\">\\s*(.*?)\\s*</td:span>\\s*(&#65279;)\\s*","<ce:author>$1</ce:author>");
								
								if(authorinfo.matches("(.*?)<[/]?td:(.*?)")){
									String err1="Error[17]: Author information Not processed properly as there exists some unprocessed information - \'<td: or </td:\'. Please check!\n"+authorinfo;
						    		System.out.println(err1);
						    		byte b[]=err1.getBytes();
						    		fos.write(b);
						    		System.exit(17);
								
								}
								
//								System.out.println("authorinfo:\'"+authorinfo+"\'");
//								System.out.println("localheader_str:......"+localheader_str+"");
								authorinfo="<ce:author-group>"+authorinfo+"</ce:author-group>";
//								System.out.println("authorinfo:\'"+authorinfo+"\'");
//								
								}
							else{		
								//log 4j writting error msg to fil
					    		String err1="Error[16]: Author information Not found in the input file. This is mandatory for all files.";
					    		System.out.println(err1);
					    		byte b[]=err1.getBytes();
					    		fos.write(b);
					    		System.exit(16);
							}

//=============================================================				
							System.out.println("\tProcessing Affiliation...");
							String affiliation="";
							String aff="";
							String saff="";
														
							pat = Pattern.compile("\\s*<td:p\\s*class=\"aff\"\\s*id=\"([^\"]*?)\">(.*?)</td:p>\\s*(<td:p\\s*class=\"saff\"\\s*id=\"([^\"]*?)\">(.*?)</td:p>)?\\s*",Pattern.DOTALL);
								m1 = pat.matcher(localheader_str);
									if(m1.find()) 
									{
										String affinfoGroup=m1.group();
										aff=m1.group(2);
										saff=m1.group(5);
										localheader_str=localheader_str.replaceAll(affinfoGroup,"");
										saff=saff.replaceAll("\\s*<td:span\\s*class=\"xps_organization\">(.*?)</td:span>,\\s*","<sa:organization>$1</sa:organization>");
										saff=saff.replaceAll("\\s*<td:span\\s*class=\"xps_address\">(.*?)</td:span>,\\s*","<sa:address-line>$1</sa:address-line>");
										saff=saff.replaceAll("\\s*<td:span\\s*class=\"xps_city\">(.*?)</td:span>,\\s*","<sa:city>$1</sa:city>");
										saff=saff.replaceAll("\\s*<td:span\\s*class=\"xps_pincode\">(.*?)</td:span>,\\s*","<sa:postal-code>$1</sa:postal-code>");
										saff=saff.replaceAll("\\s*<td:span\\s*class=\"xps_country\">(.*?)</td:span>\\s*","<sa:country>$1</sa:country>");
										
//										System.out.println("aff:\'"+aff+"\'");
//										System.out.println("saff:\'"+saff+"\'");
										
//										System.out.println("localheader_str:\'"+localheader_str+"\'");
										aff="<ce:textfn>"+aff+"</ce:textfn>";
										if(!saff.equals(""))
										{
											saff="<sa:affiliation>"+saff+"</sa:affiliation>";
										}
										affiliation="<ce:affiliation>"+aff+saff+"</ce:affiliation>";
//										System.out.println("aff:\'"+affiliation+"\'");
									}
									authorinfo=authorinfo.replace("</ce:author-group>", affiliation+"</ce:author-group>");

									if(affiliation.matches("(.*?)<[/]?td:(.*?)")){
										String err1="Error[18]: Affiliation information Not processed properly as there exists some unprocessed information - \'<td: or </td:\'. Please check!\n"+affiliation;
							    		System.out.println(err1);
							    		byte b[]=err1.getBytes();
							    		fos.write(b);
							    		System.exit(18);
									
									}
									
				
	//=============================================================
											System.out.println("\tProcessing Corresponding Address...");
											String auttel="";			
											pat = Pattern.compile("\\s*<td:div\\s*id=\"xps_corr\">\\s*<td:p\\s*class=\"cor\"\\s*id=\"([^\"]*?)\">(.*?)</td:p>\\s*</td:div>\\s*",Pattern.DOTALL);
											 m1 = pat.matcher(localheader_str);
											if(m1.find()) 
												{
													String auttelinfoGroup=m1.group();
													auttel=m1.group(2);
//													System.out.println(".......localheader_str:\'"+localheader_str+"\'");
													localheader_str=localheader_str.replace(auttelinfoGroup,"");
													auttel=auttel.replaceAll("^\\s*<td:sup>\\*</td:sup>\\s*","<ce:label>?</ce:label><ce:text>");
													auttel=auttel+"</ce:text>";
													if(!auttel.equals(""))	
													{
														auttel="<ce:correspondence>"+auttel+"</ce:correspondence>";
													}
//							System.out.println("auttel:\'"+auttel+"\'");
												}
											if(auttel.matches("(.*?)<[/]?td:(.*?)")){
												String err1="Error[19]: Corresponding information Not processed properly as there exists some unprocessed information - \'<td: or </td:\'. Please check!\n"+auttel;
									    		System.out.println(err1);
									    		byte b[]=err1.getBytes();
									    		fos.write(b);
									    		System.exit(19);
											
											}
											authorinfo=authorinfo.replace("</ce:author-group>", auttel+"</ce:author-group>");
											
				//=============================================================		
											//reserved for author-footnote
				//=============================================================	
											
//											authorinfo=authorinfo+"</ce:author-group>";
//											System.out.println("authorinfo:\'"+authorinfo+"\'");
//											System.out.println("localheader_str:\'"+localheader_str+"\'");
										System.exit(0);
										
				//=============================================================					
									
							System.out.println("\tProcessing Article History...");
							String history="";
//							System.out.println("localheader_str:\'"+localheader_str+"\'");
//																
							Pattern pa = Pattern.compile("<td:p\\s*class=\"history\"\\s*id=\"([^\"]*?)\">(.*?)</td:p>",Pattern.DOTALL);
								java.util.regex.Matcher m2 = pa.matcher(localheader_str);
									if(m2.find()) 
									{
										String historyinfoGroup=m2.group();
										history=m2.group();
//										localheader_str=localheader_str.replaceAll(historyinfoGroup,"");
//										System.out.println("localheader_str:..."+localheader_str);
//										System.out.println("history:\'"+history+"\'");
										history=history.replaceAll("\\s*<td:p\\s*class=\"history\"\\s*id=\"editor_para_1\">(.*?)</td:p>\\s*","<ce:history>$1</ce:history>");
										localheader_str=localheader_str.replaceAll(historyinfoGroup,"");
//										history="<ce:history>"+history+"</ce:history>";
										System.out.println("history1:\'"+history+"\'");
									}
									else{		
										//log 4j writting error msg to fil
							    		String err1="Error[19]: Article History information Not found in the input file. This is mandatory for all files.";
							    		System.out.println(err1);
							    		byte b[]=err1.getBytes();
							    		fos.write(b);
							    		System.exit(19);
									}
				
				return localheader_str;
			}

			public static String ItemInfo(String str1) throws IOException, SAXException 
			{
				String  iteminfo_str="";
				System.out.println("Processing Item-Info...");
				
//		    	System.out.println("Item-info...str.."+str);
		    	
		    	Pattern p = Pattern.compile("<td:div\\s+id=\"xps_meta\"\\s*>(.*?)</td:div>");
		    	
//		    	//String input = "6 example input 4";
//		    	java.util.regex.Matcher m = p.matcher(str);    	
//		        Pattern p = Pattern.compile("<td:br />");
		    	
		        java.util.regex.Matcher m=p.matcher(str1);
		        
	
		    	if (m.find()) 
		    	{
		    	   
		    		iteminfo_str=m.group();
		    		//str.replace(iteminfo_str,"");
		    		int prepos=0;
		    		int postpos=0;
		    		prepos=m.start();
		    		postpos=m.end();
//		    		System.out.println(postpos); 		
		    		
		    		str=str1.substring(0,prepos)+str1.substring(postpos+1,str1.length());
//		    		System.out.println("prepos..."+prepos);
//		    		System.out.println("postpos.."+postpos);
		    		
//		    		str=removefromstr("<td:div\\s+([^>]*?)>(.*?)</td:div>",str);
		    		
//		    		System.out.println("iteminfo_str:..."+iteminfo_str);
		    		//System.out.println("str:..."+str);
		    		
		    		iteminfo_str=ProcessItemInfo(iteminfo_str);
//		    		
		    		
		    	}
		    	else
		    	{
		    		//log 4j writting error msg to fil
		    		String err1="Error[3]: No ItemInfo found in the input file. This information is mandatory for all files.\n";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
//		    		System.out.println(err1);
		    		fos.write(b);
		    		System.exit(3);
		    	}
		    	return iteminfo_str;
		    }
			
			
			public static String ProcessItemInfo(String iteminfo_str) throws IOException, SAXException {
				String localiteminfo_str=iteminfo_str;
				localiteminfo_str=localiteminfo_str.replaceAll("^<td:div\\s+id=\"xps_meta\"\\s*>\\s*\\**", "");
				localiteminfo_str=localiteminfo_str.replaceAll("\\s*\\**</td:div>$", "");
				
//				System.out.println("localiteminfo_str=====:"+localiteminfo_str);
				
							
//===============================================Article language code capturing
				System.out.println("\tProcessing Article Language...");
				String langcode="";
				if(localiteminfo_str.matches("(.*?)<td:br\\s*/>\\s*Lang:\\s*([a-z]+)\\s*<td:br\\s*/>(.*?)"))
				{
					Pattern patt = Pattern.compile("<td:br\\s*/>\\s*Lang:\\s*([a-z]+)\\s*<td:br\\s*/>");
					java.util.regex.Matcher m = patt.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						langcode=m.group(1);
						localiteminfo_str=localiteminfo_str.replaceAll(m.group(),"<td:br/>");
						  }
//					System.out.println("langcode:\'"+langcode+"\'");
					if(LangCode.matches("(.*)[|]"+langcode+"[|](.*)")){
//						System.out.println("langcode:correct");
					}
					else 
					{
						//log 4j writting error msg to fil
			    		String err1="Error[5]: The given Article Language code \'"+langcode+"\' is invalid!\nThe valid Article Language codes are:"+LangCode;
			    		System.out.println(err1);
			    		byte b[]=err1.getBytes();
			    		fos.write(b);
			    		System.exit(5);
					}
//					System.out.println("loc:.."+localiteminfo_str);
				}else{		
					//log 4j writting error msg to fil
		    		String err1="Error[4]: No Article Language code found in the input file. This is mandatory for all files.";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(4);
				}
//=============================================================
				System.out.println("\tProcessing Client Information...");
				String client="";
				if(localiteminfo_str.matches("(.*?)<td:br\\s*/>\\s*Client:\\s*([A-Za-z]+)\\s*<td:br\\s*/>(.*?)"))
									
				{
//					System.out.println("local:.."+localiteminfo_str);
					Pattern pattern = Pattern.compile("<td:br\\s*/>\\s*Client:\\s*([A-Za-z]+)\\s*<td:br\\s*/>");
					java.util.regex.Matcher m = pattern.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						client=m.group(1);
//						System.out.println("ClientInfo:.."+client);
						localiteminfo_str=localiteminfo_str.replaceAll(m.group(),"<td:br/>");
					  }
//					System.out.println("client:..."+client);
					if(client.matches("[E][L][J]")){
//						System.out.println("ClientDetails.."+client);
					}
					else 
					{
						//log 4j writting error msg to fil
			    		String err1="Error[6]: Invalid Client Information "+client+" is given!\nThe valid client name is ELJ";
			    		System.out.println(err1);
			    		byte b[]=err1.getBytes();
			    		fos.write(b);
			    		System.exit(6);
					}
//					System.out.println("local:.."+localiteminfo_str);
									
				}
				else 
				{
					//log 4j writting error msg to fil
		    		String err1="Error[8]: Client Information is not given!";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(8);
				}
					
//=============================================================
				System.out.println("\tProcessing Jid and Aid ...");
				String jid="";
				String aid="";
				if(localiteminfo_str.matches("(.*?)<td:br\\s*/>\\s*([A-Za-z]+)\\s+(\\d+)\\s*<td:br\\s*/>(.*?)"))
									
				{
//					System.out.println("local:.."+localiteminfo_str);
					Pattern pattern = Pattern.compile("<td:br\\s*/>\\s*([A-Za-z]+)\\s+(\\d+)\\s*<td:br\\s*/>");
					java.util.regex.Matcher m = pattern.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						jid=m.group(1);
						aid=m.group(2);
//						System.out.println("Jid,aid:.."+jid+","+aid);
						localiteminfo_str=localiteminfo_str.replaceAll(m.group(),"<td:br/>");
					  }
//					System.out.println("client:..."+client);
	
//					System.out.println("local:.."+localiteminfo_str);
									
				}
				else
				{
					//log 4j writting error msg to fil
		    		String err1="\t\tError[7]: Either Journel-id or Article-id not found!\n\t\tCorrect format is AAA 123";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(7);
				}
				
//=============================================================		
				System.out.println("\tProcessing Pii...");
				
				String pii="";
				
				if(localiteminfo_str.matches("(.*?)<td:br\\s*/>\\s*(([S])(\\d{4})[-](\\d{4})[\\(](\\d{2})[\\)](\\d{5})[-](\\d))<td:br\\s*/>(.*?)"))
					
				{
//					System.out.println("pii:.."+localiteminfo_str);
					Pattern pattern = Pattern.compile("<td:br\\s*/>\\s*(([S])(\\d{4})[-](\\d{4})[\\(](\\d{2})[\\)](\\d{5})[-](\\d))<td:br\\s*/>");
					java.util.regex.Matcher m = pattern.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						pii=m.group(1);
//						System.out.println("localiteminfo_str1:..."+localiteminfo_str);
//						System.out.println("Group:..."+m.group());
						localiteminfo_str=localiteminfo_str.replace(m.group(),"<td:br/>");
//						System.out.println("localiteminfo_str2:..."+localiteminfo_str);
					  }

//					System.out.println("piino:.."+pii);
									
				}
				else
				{
					//log 4j writting error msg to fil
		    		String err1="\t\tError[9]: PII Information is not found!";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(9);
				}
				
//=============================================================		
				System.out.println("\tProcessing Doi and Articlenumber...");
				
				String doi="";
				String articlenumber="";
				
				if(localiteminfo_str.matches("(.*?)<td:br\\s*/>\\s*((10.1016/)(.*?))<td:br\\s*/>(.*?)"))
									
				{
					
					Pattern pattern = Pattern.compile("<td:br\\s*/>\\s*((10.1016/)(.*?))<td:br\\s*/>");
					java.util.regex.Matcher m = pattern.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						doi=m.group(1);
						articlenumber=doi.substring(doi.lastIndexOf(".")+1);
						localiteminfo_str=localiteminfo_str.replaceAll(m.group(),"<td:br/>");
					  }

//					System.out.println("doino:.."+doi);
//					System.out.println("Articleno:.."+articlenumber);
									
				}
				else
				{
					//log 4j writting error msg to fil
		    		String err1="\t\tError[10]: Doi and Articlenumber Information is not found!";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(10);
				}
				
//				System.out.println("localiteminfo_str:..."+localiteminfo_str);
//=============================================================		
				System.out.println("\tProcessing Copyrightstatus...");

				String copyrightstatus="";
				String copyrighttype ="";
				String copyrightyear="";
				String copyrightorg="";

				if(localiteminfo_str.matches("(.*?)<td:br\\s*/>\\s*(\\d{3})\\s*<td:br\\s*/>(.*?)"))
									
				{
					Pattern pattern = Pattern.compile("<td:br\\s*/>\\s*(\\d{3})\\s*<td:br\\s*/>");
					java.util.regex.Matcher m = pattern.matcher(localiteminfo_str);
					if(m.find()) 
					  {
						copyrightstatus=m.group(1);
//						System.out.println("copyrightstatus is:... "+m.group(1));
				
						//getting current year 
						
						Calendar now = Calendar.getInstance();
						copyrightyear="" + now.get(Calendar.YEAR);
						//System.out.println("Current Year is : " + now.get(Calendar.YEAR));
														 
						String copyrightstatuspatternmatch="[@|]"+copyrightstatus+"[|](.*?)[|](.*?)[|@]";
						Pattern pattern1 = Pattern.compile(copyrightstatuspatternmatch);
//						Pattern pattern1 = Pattern.compile("@|"+copyrightstatus+"|([a-zA-Z]*?)|@");
						
						java.util.regex.Matcher m1 = pattern1.matcher(copyrightInfo);     				    						      
						
						if(m1.find())
						{
//							System.out.println(m1.group());
							copyrighttype = m1.group(1).trim();
							copyrightorg =m1.group(2).trim();
						}
						else
						{
							//log 4j writting error msg to fil
				    		String err1="\t\tError[12]:Invalid Copyrightstatus \'"+copyrightstatus+"\' is given! The valid copyrightstatus are: 000,001,002,003,004,005,006,007,008";
				    		System.out.println(err1);
				    		byte b[]=err1.getBytes();
				    		fos.write(b);
				    		System.exit(12);	
						}
						     
						          
//						    System.out.println("\t\tcopyrighttype is: "+copyrighttype+"\tcopyrightyear: " + copyrightyear+"\tcopyrightorg:"+copyrightorg);
						
						localiteminfo_str=localiteminfo_str.replace(m.group(),"<td:br/>");
					  }
				
				}
				else 
				{
					//log 4j writting error msg to fil
		    		String err1="\t\tError[11]:Copyrightstatus Information is not found!";
		    		System.out.println(err1);
		    		byte b[]=err1.getBytes();
		    		fos.write(b);
		    		System.exit(11);
				}
				
//				System.out.println("localiteminfo_str:..."+localiteminfo_str);

				localiteminfo_str=localiteminfo_str.replaceAll("\\s*<td:br\\s*/>\\s*", "");
				
				localiteminfo_str=localiteminfo_str.trim();
				
//				System.out.println("localiteminfo_str:..."+localiteminfo_str);
				
				if(localiteminfo_str.equals(""))
				{
					localiteminfo_str="<item-info><jid>"+jid+"</jid>";
					
					if(!aid.equals("")){
						localiteminfo_str+="<aid>"+aid+"</aid>";
					}
					if(!articlenumber.equals("")){
						localiteminfo_str+="<ce:article-number>"+articlenumber+"</ce:article-number>";}
					
						localiteminfo_str+="<ce:pii>"+pii+"</ce:pii>" ;
					if(!doi.equals("")){
						localiteminfo_str+="<ce:doi>"+doi+"</ce:doi>" ;}
//					
						localiteminfo_str+="<ce:copyright type=\""+copyrighttype+"\" year=\""+copyrightyear+"\">"+copyrightorg+"</ce:copyright>" ;
						localiteminfo_str+="</item-info>";
					
					
//					System.out.println("localiteminfo_strxml:..."+localiteminfo_str);
					
					
				}
				else 
				{

						//log 4j writting error msg to fil
			    		String err1="\t\tError[13]:ItemInfo not processed completly!\n\t\t\""+localiteminfo_str+"\" is left unprocessed!\n\t\tPlease check!";
			    		System.out.println(err1);
			    		byte b[]=err1.getBytes();
			    		fos.write(b);
			    		System.exit(13);

				}
				//System.out.println("str2===="+str);
				return localiteminfo_str;
			}
			
//=============================================================		
			

			public String removefromstr(String removeStr,String str)
			{
				System.out.println("removeStr:"+removeStr);
				  Pattern patt = Pattern.compile((String) removeStr);
				  java.util.regex.Matcher m = patt.matcher(str);
				  StringBuffer sb = new StringBuffer(str.length());
				  while (m.find()) 
				  {
				    String text = m.group();
				    System.out.println("text:"+text);
				    // ... possibly process 'text' ...
				    System.out.println("sb-before:"+sb.toString());
				    //m.appendReplacement(sb, m.quoteReplacement(text));
				    m.appendReplacement(sb, "");
				    System.out.println("sb-after:"+sb.toString());
				  }
				  m.appendTail(sb);
				  return sb.toString();
				}
			
			

			public static void initXML() throws ParserConfigurationException,TransformerConfigurationException, SAXException 
			{
		        // JAXP + SAX
		        SAXTransformerFactory tf = (SAXTransformerFactory) SAXTransformerFactory
		                .newInstance();

		        th = tf.newTransformerHandler();
		        Transformer serializer = th.getTransformer();
		        serializer.setOutputProperty(OutputKeys.ENCODING, "ISO-8859-1");
		        // pretty XML output
		        serializer.setOutputProperty(
		                "{http://xml.apache.org/xslt}indent-amount", "4");
		        serializer.setOutputProperty(OutputKeys.INDENT, "yes");
		        th.setResult(out);
		        th.startDocument();
		        atts = new AttributesImpl();
		        th.startElement("", "", "item-info", atts);
		        System.out.println("ItemInfer.."+serializer);
		    }

		   
			    public void closeXML() throws SAXException 
		    {
		       
		        th.endElement("", "", "item-info");
		        th.endDocument();
		    }
		

}
