package td.com.thomson.s5dataset;
	import java.io.*;
	import java.util.*;
	import java.lang.StringBuffer;
	import org.apache.log4j.Logger;

	import com.thomson.master.Main;

	public class Entity2UTF8Conversion {
		String inbuf="";
		byte outbuf[]=null;
		int outbufLength=0;
		boolean starter[]=new boolean[256];
		int maxLen=0;
	    Properties entProp=null, utfProp=null;

		//public Properties load(String arg) 
		public Properties load() 
		{
			Properties p=new Properties();
	        try {
	        	FileInputStream fs=new FileInputStream(new File(MainForm.getCommanProperties().getProperty("ENTITY2UTF8PROPERTIES")));
	        	p.load(fs);
	        	fs.close();
	        } catch (Exception e) 
	        {
	        	Main.getLogger().info("[Entity2UTF8Conversion load()]Failed to open Property file "+MainForm.getCommanProperties().getProperty("ENTITY2UTF8PROPERTIES"));
	        	System.err.println("Failed to open Property file "+MainForm.getCommanProperties().getProperty("ENTITY2UTF8PROPERTIES"));
	        	p=null;
	        }
	        return p;
		}

		public void read(String p1) {
			entProp=load();
	        Enumeration en = entProp.propertyNames();
	        while(en.hasMoreElements()) {
	            String name = (String)en.nextElement();
	            if (maxLen<name.length()) maxLen=name.length();
	        }

			String s=null;
			try {
			   File f1=new File(p1);
			   outbuf=new byte[2*(int)f1.length()];
			   BufferedReader in = new BufferedReader(new FileReader(p1));
			   String sep="";
			   while (((s=in.readLine())!=null)) {
			   	  inbuf=inbuf+sep+s;
			   	  sep="\n";
			   }
			   in.close();
			} catch (Exception e) 
			{
				Main.getLogger().info("[Entity2UTF8Conversion read()]"+e.getMessage());
		     	e.printStackTrace();
				inbuf=null;
				return;
			}
		}
		public void write(String arg) 
		{
			try {
	           FileOutputStream ps=new FileOutputStream(arg);
	           ps.write(outbuf,0,outbufLength);
	           ps.close();
			} catch (Exception e)
			{
				Main.getLogger().info("[Entity2UTF8Conversion write()]"+e.getMessage());
				e.printStackTrace();
			}
		}

		public String utf8(int c) {
			char b1, b2, b3, b4;
			if (c<0x80)
				return ""+((char)c);
			else if (c<0x0800) {
				b1 = (char)((c>>6  & 0x1F | 0xC0)& 0xFF);
				b2 = (char)((c>>0  & 0x3F | 0x80)& 0xFF);
				return ""+b1+""+b2;
			} else if (c<0x010000) {
				b1 = (char)((c>>12 & 0x0F | 0xE0)& 0xFF);
				b2 = (char)((c>>6  & 0x3F | 0x80)& 0xFF);
				b3 = (char)((c>>0  & 0x3F | 0x80)& 0xFF);
				return ""+b1+""+b2+""+b3;
			} else if (c<0x110000) {
				b1 = (char)((c>>18 & 0x07 | 0xF0)& 0xFF);
				b2 = (char)((c>>12 & 0x3F | 0x80)& 0xFF);
				b3 = (char)((c>>6  & 0x3F | 0x80)& 0xFF);
				b4 = (char)((c>>0  & 0x3F | 0x80)& 0xFF);
				return ""+b1+""+b2+""+b3+""+b4;
			}
			return null;
		}

		public int check(int p1) {
			String srch="";
			String r=null;
			char ch=0;
			for (int i=p1;i<inbuf.length() && i<p1+maxLen;i++) {
				srch=srch+(ch=inbuf.charAt(i));
				if (ch==';') break;
			}
			if (ch==';') {
				r=entProp.getProperty(srch);
				if (r==null && srch.charAt(1)=='#' && srch.charAt(2)=='x') {
					r=utf8(Integer.parseInt(srch.substring(3,srch.length()-1),16));
				} if (r==null && srch.charAt(1)=='#') {
					r=utf8(Integer.parseInt(srch.substring(2,srch.length()-1)));
				}
			}
			if (r!=null) {
				for (int i=0;i<r.length();i++) outbuf[outbufLength++]=(byte)r.charAt(i);
				return p1+srch.length()-1;
			}
			outbuf[outbufLength++]=(byte)'&';
			return p1;
		}

		public void convert() {
			for (int i=0;i<inbuf.length();i++) {
				char ch=inbuf.charAt(i);
				if (ch=='&')
					i=check(i);
				else
				    outbuf[outbufLength++]=(byte)ch;
			}
		}

		public void process(String p1, String p2) {
			read(p1);
			convert();
			write(p2);
		}
		public static void main(String arg[])
		{
			new Entity2UTF8Conversion().process(arg[0],arg[1]);
			//new Entity2UTF8Conversion().process(arg[0],arg[1],arg[2]);
//			new Replace().process("E:\\ppp_root\\JOBS\\elsevier\\journal\\colsua\\17351\\tx1.xml","tx1.out","Entities.ini");
		}
	}


-------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
package New;


import java.io.*;
import java.util.*;
import java.lang.StringBuffer;

import org.apache.log4j.Logger;

public class Utf82ent {
	private static final Logger logger = Logger.getLogger(Utf82ent.class);
    byte inbuf[]=null;
	byte outbuf[]=null;
	int outbufLength=0;
	boolean starter[]=new boolean[256];
	int maxLen=0;
    Properties entProp=null, utfProp=null;

	public Properties load(String arg) {
		Properties p=new Properties();
        try {
        	FileInputStream fs=new FileInputStream(new File(arg));
        	p.load(fs);
        	fs.close();
        } catch (Exception e) {
        	logger.error("Failed to open Property file "+arg);
        	System.err.println("Failed to open Property file "+arg);
        	p=null;
        }
        return p;
	}

	public void read(String p1) {
		entProp=load("D:\\UTF8conversion\\utf.ini");
        for (int i=0;i<starter.length;i++) starter[i]=false;
        Enumeration en = entProp.propertyNames();
        while(en.hasMoreElements()) {
            String name = (String)en.nextElement();
            //System.out.println("name :: "+name);
            if (maxLen<name.length()) maxLen=name.length();
            char ch=name.charAt(0);
            if (ch<256) starter[ch]=true;
        }

		String s=null;
		try {
		   File f1=new File(p1);
		   outbuf=new byte[2*(int)f1.length()];
		   inbuf=new byte[(int)f1.length()];
           FileInputStream ps=new FileInputStream(f1);
           ps.read(inbuf);
           ps.close();
		} catch (Exception e) {
			logger.error("[ERROR] :: "+e.getMessage());
			e.printStackTrace();
		}
	}
	public void write(String arg) {
		try {
           FileOutputStream ps=new FileOutputStream(arg);
           ps.write(outbuf,0,outbufLength);
           ps.close();
		} catch (Exception e) {
			logger.error("[ERROR] :: "+e.getMessage());
			e.printStackTrace();
		}
	}

	public void convert() {
		for (int i=0;i<inbuf.length;i++) {
			char ch=(char)(inbuf[i]&0xff);
			String r=null;
			String s=null;
			if (starter[ch]) {
				int len=maxLen;
				if (i+maxLen>inbuf.length) len=inbuf.length-i;
				s="";
				for (int i3=i;i3<i+len;i3++) s=s+(char)(inbuf[i3] & 0xff);
				if (s.charAt(0)>128) {
					int ii=0;
				}
				while (s.length()>0 && r==null) {
					r=entProp.getProperty(s);
					if (r!=null) break;
					s=s.substring(0,s.length()-1);
				}
			}
			if (r==null && (ch&0xc0)==0xc0) {
				int b=2;
				int ic=ch&0x3f;
				s="12";
				if ((ch&0xf0)==0xf0) {
					b=4;
					ic=ch&0x0f;
					s="1234";
				} else if ((ch&0xE0)==0xE0) {
					b=3;
					ic=ch&0x0f;
					s="123";
				}
				for (int i2=1;i2<b;i2++) {
					ic=ic*64+(char)(inbuf[i+i2] & 0x3f);
				}
				r="&#x"+Integer.toHexString(ic)+";";
			}
		    if (r!=null) {
				i=i+s.length()-1;
				for (int i2=0;i2<r.length();i2++) outbuf[outbufLength++]=(byte)r.charAt(i2);
			} else {
				outbuf[outbufLength++]=(byte)ch;
			}
		}
	}

	public void process(String p1) {
		read(p1);
		convert();
		new File(p1).delete();
		write(p1);
	}
	public static void main(String arg[]) {
//		new Utf82ent().process(arg[0]);
		new Utf82ent().process("D://tx1.xml");
		System.out.println("hiiiiiiiiiiiiiii");
	}
}

